
CAN-normal-mode-v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004140  08004140  00014140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004214  08004214  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004214  08004214  00014214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800421c  0800421c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800421c  0800421c  0001421c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004220  08004220  00014220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000200  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b2d6  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b9e  00000000  00000000  0002b3b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b88  00000000  00000000  0002cf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008d6  00000000  00000000  0002dad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021be6  00000000  00000000  0002e3ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000c4e4  00000000  00000000  0004ff94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ccb22  00000000  00000000  0005c478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003810  00000000  00000000  00128f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0012c7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004128 	.word	0x08004128

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004128 	.word	0x08004128

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <SysTick_Handler>:
extern TIM_HandleTypeDef htim6;
extern void CAN1_Tx(uint8_t remote);


void SysTick_Handler (void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000570:	f000 fd68 	bl	8001044 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000574:	f001 fcdb 	bl	8001f2e <HAL_SYSTICK_IRQHandler>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}

0800057c <CAN1_TX_IRQHandler>:


void CAN1_TX_IRQHandler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <CAN1_TX_IRQHandler+0x10>)
 8000582:	f001 f9b2 	bl	80018ea <HAL_CAN_IRQHandler>
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000084 	.word	0x20000084

08000590 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000594:	4802      	ldr	r0, [pc, #8]	; (80005a0 <CAN1_RX0_IRQHandler+0x10>)
 8000596:	f001 f9a8 	bl	80018ea <HAL_CAN_IRQHandler>

}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000084 	.word	0x20000084

080005a4 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80005a8:	4802      	ldr	r0, [pc, #8]	; (80005b4 <CAN1_SCE_IRQHandler+0x10>)
 80005aa:	f001 f99e 	bl	80018ea <HAL_CAN_IRQHandler>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000084 	.word	0x20000084

080005b8 <TIM6_DAC_IRQHandler>:


void TIM6_DAC_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 80005bc:	4802      	ldr	r0, [pc, #8]	; (80005c8 <TIM6_DAC_IRQHandler+0x10>)
 80005be:	f002 fbc1 	bl	8002d44 <HAL_TIM_IRQHandler>

}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000ac 	.word	0x200000ac

080005cc <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 80005d0:	4804      	ldr	r0, [pc, #16]	; (80005e4 <EXTI15_10_IRQHandler+0x18>)
 80005d2:	f002 fb47 	bl	8002c64 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80005d6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80005da:	f001 fe6b 	bl	80022b4 <HAL_GPIO_EXTI_IRQHandler>

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200000ac 	.word	0x200000ac

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 fcd8 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f820 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 f8f2 	bl	80007dc <MX_GPIO_Init>
  MX_CAN1_Init();
 80005f8:	f000 f886 	bl	8000708 <MX_CAN1_Init>
  MX_TIM6_Init();
 80005fc:	f000 f8b8 	bl	8000770 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  CAN1_Init();
 8000600:	f000 f95a 	bl	80008b8 <CAN1_Init>
  CAN1_Filter_Config();
 8000604:	f000 f9be 	bl	8000984 <CAN1_Filter_Config>


  /* USER CODE END 2 */
  if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_BUSOFF) != HAL_OK)
 8000608:	f240 4103 	movw	r1, #1027	; 0x403
 800060c:	4808      	ldr	r0, [pc, #32]	; (8000630 <main+0x48>)
 800060e:	f001 f946 	bl	800189e <HAL_CAN_ActivateNotification>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <main+0x34>
	  Error_Handler();
 8000618:	f000 fb26 	bl	8000c68 <Error_Handler>

  if(HAL_CAN_Start(&hcan1) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <main+0x48>)
 800061e:	f000 ff0d 	bl	800143c <HAL_CAN_Start>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <main+0x44>
	  Error_Handler();
 8000628:	f000 fb1e 	bl	8000c68 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062c:	e7fe      	b.n	800062c <main+0x44>
 800062e:	bf00      	nop
 8000630:	20000084 	.word	0x20000084

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f002 ffe6 	bl	8003614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a27      	ldr	r2, [pc, #156]	; (8000700 <SystemClock_Config+0xcc>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a21      	ldr	r2, [pc, #132]	; (8000704 <SystemClock_Config+0xd0>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80006a8:	2350      	movs	r3, #80	; 0x50
 80006aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b0:	2307      	movs	r3, #7
 80006b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 fe1f 	bl	80022fc <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c4:	f000 fad0 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80006d4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2102      	movs	r1, #2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 f880 	bl	80027ec <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f2:	f000 fab9 	bl	8000c68 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	; 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800070c:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_CAN1_Init+0x60>)
 800070e:	4a17      	ldr	r2, [pc, #92]	; (800076c <MX_CAN1_Init+0x64>)
 8000710:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_CAN1_Init+0x60>)
 8000714:	2210      	movs	r2, #16
 8000716:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000718:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_CAN1_Init+0x60>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_CAN1_Init+0x60>)
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_CAN1_Init+0x60>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_CAN1_Init+0x60>)
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <MX_CAN1_Init+0x60>)
 8000732:	2200      	movs	r2, #0
 8000734:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_CAN1_Init+0x60>)
 8000738:	2200      	movs	r2, #0
 800073a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_CAN1_Init+0x60>)
 800073e:	2200      	movs	r2, #0
 8000740:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_CAN1_Init+0x60>)
 8000744:	2200      	movs	r2, #0
 8000746:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_CAN1_Init+0x60>)
 800074a:	2200      	movs	r2, #0
 800074c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_CAN1_Init+0x60>)
 8000750:	2200      	movs	r2, #0
 8000752:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_CAN1_Init+0x60>)
 8000756:	f000 fc95 	bl	8001084 <HAL_CAN_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000760:	f000 fa82 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000084 	.word	0x20000084
 800076c:	40006400 	.word	0x40006400

08000770 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000776:	463b      	mov	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_TIM6_Init+0x64>)
 8000780:	4a15      	ldr	r2, [pc, #84]	; (80007d8 <MX_TIM6_Init+0x68>)
 8000782:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_TIM6_Init+0x64>)
 8000786:	f242 7210 	movw	r2, #10000	; 0x2710
 800078a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_TIM6_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_TIM6_Init+0x64>)
 8000794:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000798:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_TIM6_Init+0x64>)
 800079c:	2280      	movs	r2, #128	; 0x80
 800079e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <MX_TIM6_Init+0x64>)
 80007a2:	f002 fa0f 	bl	8002bc4 <HAL_TIM_Base_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80007ac:	f000 fa5c 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_TIM6_Init+0x64>)
 80007be:	f002 fc91 	bl	80030e4 <HAL_TIMEx_MasterConfigSynchronization>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80007c8:	f000 fa4e 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000ac 	.word	0x200000ac
 80007d8:	40001000 	.word	0x40001000

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <MX_GPIO_Init+0xd4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a2d      	ldr	r2, [pc, #180]	; (80008b0 <MX_GPIO_Init+0xd4>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b2b      	ldr	r3, [pc, #172]	; (80008b0 <MX_GPIO_Init+0xd4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <MX_GPIO_Init+0xd4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a26      	ldr	r2, [pc, #152]	; (80008b0 <MX_GPIO_Init+0xd4>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <MX_GPIO_Init+0xd4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <MX_GPIO_Init+0xd4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a1f      	ldr	r2, [pc, #124]	; (80008b0 <MX_GPIO_Init+0xd4>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_GPIO_Init+0xd4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_GPIO_Init+0xd4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a18      	ldr	r2, [pc, #96]	; (80008b0 <MX_GPIO_Init+0xd4>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_GPIO_Init+0xd4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_GPIO_Init+0xd4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a11      	ldr	r2, [pc, #68]	; (80008b0 <MX_GPIO_Init+0xd4>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_GPIO_Init+0xd4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000884:	480b      	ldr	r0, [pc, #44]	; (80008b4 <MX_GPIO_Init+0xd8>)
 8000886:	f001 fcfb 	bl	8002280 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 800088a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_GPIO_Init+0xd8>)
 80008a4:	f001 fb50 	bl	8001f48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	; 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020c00 	.word	0x40020c00

080008b8 <CAN1_Init>:

/* USER CODE BEGIN 4 */

// CAN1 initialization function
void CAN1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <CAN1_Init+0x64>)
 80008be:	4a18      	ldr	r2, [pc, #96]	; (8000920 <CAN1_Init+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <CAN1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = ENABLE;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <CAN1_Init+0x64>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <CAN1_Init+0x64>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <CAN1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <CAN1_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <CAN1_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <CAN1_Init+0x64>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	775a      	strb	r2, [r3, #29]

	// Settings related to CAN1 timing
	hcan1.Init.Prescaler = 3;
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <CAN1_Init+0x64>)
 80008ee:	2203      	movs	r2, #3
 80008f0:	605a      	str	r2, [r3, #4]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <CAN1_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <CAN1_Init+0x64>)
 80008fa:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80008fe:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <CAN1_Init+0x64>)
 8000902:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000906:	615a      	str	r2, [r3, #20]

	if(HAL_CAN_Init(&hcan1) != HAL_OK)
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <CAN1_Init+0x64>)
 800090a:	f000 fbbb 	bl	8001084 <HAL_CAN_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <CAN1_Init+0x60>
	{
		Error_Handler();
 8000914:	f000 f9a8 	bl	8000c68 <Error_Handler>
	}
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000084 	.word	0x20000084
 8000920:	40006400 	.word	0x40006400

08000924 <CAN1_Tx>:

void CAN1_Tx(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t Txmailbox;
	uint8_t message;

	// Defining the parameters for TxHeader
	TxHeader.StdId = 0x65D;
 800092a:	f240 635d 	movw	r3, #1629	; 0x65d
 800092e:	60bb      	str	r3, [r7, #8]
	TxHeader.DLC = 1;
 8000930:	2301      	movs	r3, #1
 8000932:	61bb      	str	r3, [r7, #24]
	TxHeader.IDE = CAN_ID_STD;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]

	message = ++led_no;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <CAN1_Tx+0x58>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	3301      	adds	r3, #1
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b0d      	ldr	r3, [pc, #52]	; (800097c <CAN1_Tx+0x58>)
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <CAN1_Tx+0x58>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	70fb      	strb	r3, [r7, #3]

	if(led_no == 4)
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <CAN1_Tx+0x58>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b04      	cmp	r3, #4
 8000954:	d102      	bne.n	800095c <CAN1_Tx+0x38>
	{
		led_no = 0;
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <CAN1_Tx+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
	}

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, &message, &Txmailbox) != HAL_OK)
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	1cfa      	adds	r2, r7, #3
 8000960:	f107 0108 	add.w	r1, r7, #8
 8000964:	4806      	ldr	r0, [pc, #24]	; (8000980 <CAN1_Tx+0x5c>)
 8000966:	f000 fdad 	bl	80014c4 <HAL_CAN_AddTxMessage>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <CAN1_Tx+0x50>
	{
		Error_Handler();
 8000970:	f000 f97a 	bl	8000c68 <Error_Handler>
	}
}
 8000974:	bf00      	nop
 8000976:	3720      	adds	r7, #32
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000111 	.word	0x20000111
 8000980:	20000084 	.word	0x20000084

08000984 <CAN1_Filter_Config>:

void CAN1_Filter_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;

	// Initializing the filter variables
	can1_filter_init.FilterActivation = CAN_FILTERMODE_IDMASK;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0x01C0;
 800099e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80009a2:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61fb      	str	r3, [r7, #28]

	// configuring the filter
	if(HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK)
 80009b0:	463b      	mov	r3, r7
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <CAN1_Filter_Config+0x48>)
 80009b6:	f000 fc61 	bl	800127c <HAL_CAN_ConfigFilter>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <CAN1_Filter_Config+0x40>
	{
		Error_Handler();
 80009c0:	f000 f952 	bl	8000c68 <Error_Handler>
	}
}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000084 	.word	0x20000084

080009d0 <send_response>:

void send_response(uint32_t std_id)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t Txmailbox;
	uint8_t response[2] = {0xAB, 0xCD};
 80009d8:	f64c 53ab 	movw	r3, #52651	; 0xcdab
 80009dc:	813b      	strh	r3, [r7, #8]

	TxHeader.DLC = 2;
 80009de:	2302      	movs	r3, #2
 80009e0:	623b      	str	r3, [r7, #32]
	TxHeader.IDE = CAN_ID_STD;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61bb      	str	r3, [r7, #24]
	TxHeader.StdId = std_id;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	613b      	str	r3, [r7, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, response, &Txmailbox) != HAL_OK)
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	f107 0208 	add.w	r2, r7, #8
 80009f6:	f107 0110 	add.w	r1, r7, #16
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <send_response+0x44>)
 80009fc:	f000 fd62 	bl	80014c4 <HAL_CAN_AddTxMessage>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <send_response+0x3a>
	{
		Error_Handler();
 8000a06:	f000 f92f 	bl	8000c68 <Error_Handler>
	}
}
 8000a0a:	bf00      	nop
 8000a0c:	3728      	adds	r7, #40	; 0x28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000084 	.word	0x20000084

08000a18 <LED_output>:

void LED_output(uint8_t led_no)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
	switch(led_no)
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	2b03      	cmp	r3, #3
 8000a28:	d86a      	bhi.n	8000b00 <LED_output+0xe8>
 8000a2a:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <LED_output+0x18>)
 8000a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a30:	08000a41 	.word	0x08000a41
 8000a34:	08000a71 	.word	0x08000a71
 8000a38:	08000aa1 	.word	0x08000aa1
 8000a3c:	08000ad1 	.word	0x08000ad1
	{
	case 1:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a46:	4830      	ldr	r0, [pc, #192]	; (8000b08 <LED_output+0xf0>)
 8000a48:	f001 fc1a 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a52:	482d      	ldr	r0, [pc, #180]	; (8000b08 <LED_output+0xf0>)
 8000a54:	f001 fc14 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a5e:	482a      	ldr	r0, [pc, #168]	; (8000b08 <LED_output+0xf0>)
 8000a60:	f001 fc0e 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a6a:	4827      	ldr	r0, [pc, #156]	; (8000b08 <LED_output+0xf0>)
 8000a6c:	f001 fc08 	bl	8002280 <HAL_GPIO_WritePin>

	case 2:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a76:	4824      	ldr	r0, [pc, #144]	; (8000b08 <LED_output+0xf0>)
 8000a78:	f001 fc02 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a82:	4821      	ldr	r0, [pc, #132]	; (8000b08 <LED_output+0xf0>)
 8000a84:	f001 fbfc 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a8e:	481e      	ldr	r0, [pc, #120]	; (8000b08 <LED_output+0xf0>)
 8000a90:	f001 fbf6 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a9a:	481b      	ldr	r0, [pc, #108]	; (8000b08 <LED_output+0xf0>)
 8000a9c:	f001 fbf0 	bl	8002280 <HAL_GPIO_WritePin>

	case 3:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa6:	4818      	ldr	r0, [pc, #96]	; (8000b08 <LED_output+0xf0>)
 8000aa8:	f001 fbea 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab2:	4815      	ldr	r0, [pc, #84]	; (8000b08 <LED_output+0xf0>)
 8000ab4:	f001 fbe4 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000abe:	4812      	ldr	r0, [pc, #72]	; (8000b08 <LED_output+0xf0>)
 8000ac0:	f001 fbde 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aca:	480f      	ldr	r0, [pc, #60]	; (8000b08 <LED_output+0xf0>)
 8000acc:	f001 fbd8 	bl	8002280 <HAL_GPIO_WritePin>

	case 4:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad6:	480c      	ldr	r0, [pc, #48]	; (8000b08 <LED_output+0xf0>)
 8000ad8:	f001 fbd2 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae2:	4809      	ldr	r0, [pc, #36]	; (8000b08 <LED_output+0xf0>)
 8000ae4:	f001 fbcc 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aee:	4806      	ldr	r0, [pc, #24]	; (8000b08 <LED_output+0xf0>)
 8000af0:	f001 fbc6 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000afa:	4803      	ldr	r0, [pc, #12]	; (8000b08 <LED_output+0xf0>)
 8000afc:	f001 fbc0 	bl	8002280 <HAL_GPIO_WritePin>
	}
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40020c00 	.word	0x40020c00

08000b0c <HAL_CAN_TxMailbox0CompleteCallback>:

// Callback functions to handle interrupt based events for CAN

// callback function to trigger interrupt if TxMailBox-0 is empty
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	printf("Message transmitted from TxMailBox-0\n");
 8000b14:	4803      	ldr	r0, [pc, #12]	; (8000b24 <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 8000b16:	f002 fc9d 	bl	8003454 <puts>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	08004140 	.word	0x08004140

08000b28 <HAL_CAN_TxMailbox1CompleteCallback>:

// callback function to trigger interrupt if TxMailBox-1 is empty
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	printf("Message transmitted from TxMailBox-1\n");
 8000b30:	4803      	ldr	r0, [pc, #12]	; (8000b40 <HAL_CAN_TxMailbox1CompleteCallback+0x18>)
 8000b32:	f002 fc8f 	bl	8003454 <puts>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	08004168 	.word	0x08004168

08000b44 <HAL_CAN_TxMailbox2CompleteCallback>:

// callback function to trigger interrupt if TxMailBox-2 is empty
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	printf("Message transmitted from TxMailBox-2\n");
 8000b4c:	4803      	ldr	r0, [pc, #12]	; (8000b5c <HAL_CAN_TxMailbox2CompleteCallback+0x18>)
 8000b4e:	f002 fc81 	bl	8003454 <puts>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	08004190 	.word	0x08004190

08000b60 <HAL_CAN_RxFifo0MsgPendingCallback>:

// callback function to get received message and process
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	uint8_t rcvd_msg[8];

	// Checking if the received frame is valid
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) != HAL_OK)
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	4a21      	ldr	r2, [pc, #132]	; (8000bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4821      	ldr	r0, [pc, #132]	; (8000bf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000b72:	f000 fd82 	bl	800167a <HAL_CAN_GetRxMessage>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
	{
		Error_Handler();
 8000b7c:	f000 f874 	bl	8000c68 <Error_Handler>
	}

	// processing data frame sent from N1 to N2
	if(RxHeader.StdId == 0x65D && RxHeader.RTR == 0)
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f240 625d 	movw	r2, #1629	; 0x65d
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d10d      	bne.n	8000ba8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d109      	bne.n	8000ba8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
	{
		LED_output(rcvd_msg[0]);
 8000b94:	7a3b      	ldrb	r3, [r7, #8]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ff3e 	bl	8000a18 <LED_output>
		printf("Message received : %d", rcvd_msg[0]);
 8000b9c:	7a3b      	ldrb	r3, [r7, #8]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4816      	ldr	r0, [pc, #88]	; (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000ba2:	f002 fbf1 	bl	8003388 <iprintf>
 8000ba6:	e021      	b.n	8000bec <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
	}

	// processing remote frame sent from N1 to N2
	else if(RxHeader.StdId == 0x651 && RxHeader.RTR == 1)
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f240 6251 	movw	r2, #1617	; 0x651
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d109      	bne.n	8000bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d105      	bne.n	8000bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
	{
		send_response(RxHeader.StdId);
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff05 	bl	80009d0 <send_response>
 8000bc6:	e011      	b.n	8000bec <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
		return;
	}

	// processing data frame sent from N2 to N1
	else if(RxHeader.StdId == 0x651 && RxHeader.IDE == 0)
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f240 6251 	movw	r2, #1617	; 0x651
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d10b      	bne.n	8000bec <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d107      	bne.n	8000bec <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
	{
		printf("Message received : %d", rcvd_msg[0] << 8 | rcvd_msg[1]);
 8000bdc:	7a3b      	ldrb	r3, [r7, #8]
 8000bde:	021b      	lsls	r3, r3, #8
 8000be0:	7a7a      	ldrb	r2, [r7, #9]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	4619      	mov	r1, r3
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000be8:	f002 fbce 	bl	8003388 <iprintf>
	}

}
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200000f4 	.word	0x200000f4
 8000bf8:	20000084 	.word	0x20000084
 8000bfc:	080041b8 	.word	0x080041b8

08000c00 <HAL_TIM_PeriodElapsedCallback>:

// Callback to generate interrupt when timer elapses
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t Txmailbox;
	uint8_t message;

	if(req_counter == 4)
 8000c08:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b04      	cmp	r3, #4
 8000c0e:	d11a      	bne.n	8000c46 <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		// N1 sending remote frame to N2
		TxHeader.DLC = 2; 		//demanding 2 bytes of reply
 8000c10:	2302      	movs	r3, #2
 8000c12:	623b      	str	r3, [r7, #32]
		TxHeader.StdId = 0x651;
 8000c14:	f240 6351 	movw	r3, #1617	; 0x651
 8000c18:	613b      	str	r3, [r7, #16]
		TxHeader.IDE = CAN_ID_STD;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
		TxHeader.RTR = CAN_RTR_REMOTE;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61fb      	str	r3, [r7, #28]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, &message, &Txmailbox) != HAL_OK)
 8000c22:	f107 030c 	add.w	r3, r7, #12
 8000c26:	f107 020b 	add.w	r2, r7, #11
 8000c2a:	f107 0110 	add.w	r1, r7, #16
 8000c2e:	480d      	ldr	r0, [pc, #52]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000c30:	f000 fc48 	bl	80014c4 <HAL_CAN_AddTxMessage>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_TIM_PeriodElapsedCallback+0x3e>
		{
			Error_Handler();
 8000c3a:	f000 f815 	bl	8000c68 <Error_Handler>
		}

		req_counter = 0;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
	else
	{
		CAN1_Tx();
		req_counter++;
	}
}
 8000c44:	e007      	b.n	8000c56 <HAL_TIM_PeriodElapsedCallback+0x56>
		CAN1_Tx();
 8000c46:	f7ff fe6d 	bl	8000924 <CAN1_Tx>
		req_counter++;
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000c54:	701a      	strb	r2, [r3, #0]
}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	; 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000110 	.word	0x20000110
 8000c64:	20000084 	.word	0x20000084

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <Error_Handler+0x8>
	...

08000c74 <HAL_MspInit>:
 */

#include "main.h"

void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f001 f917 	bl	8001eac <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <HAL_MspInit+0x40>)
 8000c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c82:	4a0c      	ldr	r2, [pc, #48]	; (8000cb4 <HAL_MspInit+0x40>)
 8000c84:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000c88:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	f06f 000b 	mvn.w	r0, #11
 8000c92:	f001 f916 	bl	8001ec2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	f06f 000a 	mvn.w	r0, #10
 8000c9e:	f001 f910 	bl	8001ec2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	f06f 0009 	mvn.w	r0, #9
 8000caa:	f001 f90a 	bl	8001ec2 <HAL_NVIC_SetPriority>
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <HAL_CAN_MspInit>:
}
*/


  void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct;

    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <HAL_CAN_MspInit+0x90>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	4a1f      	ldr	r2, [pc, #124]	; (8000d48 <HAL_CAN_MspInit+0x90>)
 8000cca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cce:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <HAL_CAN_MspInit+0x90>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]

	/**CAN1 GPIO Configuration
	PA11     ------> CAN1_RX
	PA12     ------> CAN1_TX
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000cdc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ce0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cee:	2309      	movs	r3, #9
 8000cf0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4814      	ldr	r0, [pc, #80]	; (8000d4c <HAL_CAN_MspInit+0x94>)
 8000cfa:	f001 f925 	bl	8001f48 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(CAN1_TX_IRQn,15,0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	210f      	movs	r1, #15
 8000d02:	2013      	movs	r0, #19
 8000d04:	f001 f8dd 	bl	8001ec2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn,15,0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	2014      	movs	r0, #20
 8000d0e:	f001 f8d8 	bl	8001ec2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn,15,0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	210f      	movs	r1, #15
 8000d16:	2015      	movs	r0, #21
 8000d18:	f001 f8d3 	bl	8001ec2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn,15,0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	210f      	movs	r1, #15
 8000d20:	2016      	movs	r0, #22
 8000d22:	f001 f8ce 	bl	8001ec2 <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000d26:	2013      	movs	r0, #19
 8000d28:	f001 f8e7 	bl	8001efa <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d2c:	2014      	movs	r0, #20
 8000d2e:	f001 f8e4 	bl	8001efa <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000d32:	2015      	movs	r0, #21
 8000d34:	f001 f8e1 	bl	8001efa <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000d38:	2016      	movs	r0, #22
 8000d3a:	f001 f8de 	bl	8001efa <HAL_NVIC_EnableIRQ>

 }
 8000d3e:	bf00      	nop
 8000d40:	3720      	adds	r7, #32
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020000 	.word	0x40020000

08000d50 <HAL_TIM_Base_MspInit>:


  void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
  {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

  	//1. enable the clock for the TIM6 peripheral
  	__HAL_RCC_TIM6_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <HAL_TIM_Base_MspInit+0x3c>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <HAL_TIM_Base_MspInit+0x3c>)
 8000d62:	f043 0310 	orr.w	r3, r3, #16
 8000d66:	6413      	str	r3, [r2, #64]	; 0x40
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_TIM_Base_MspInit+0x3c>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	f003 0310 	and.w	r3, r3, #16
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]

  	//2. Enable the IRQ of TIM6
  	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d74:	2036      	movs	r0, #54	; 0x36
 8000d76:	f001 f8c0 	bl	8001efa <HAL_NVIC_EnableIRQ>

  	//3. setup the priority for TIM6_DAC_IRQn
  	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	210f      	movs	r1, #15
 8000d7e:	2036      	movs	r0, #54	; 0x36
 8000d80:	f001 f89f 	bl	8001ec2 <HAL_NVIC_SetPriority>

  }
 8000d84:	bf00      	nop
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40023800 	.word	0x40023800

08000d90 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <ITM_SendChar+0x48>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <ITM_SendChar+0x48>)
 8000da0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000da4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <ITM_SendChar+0x4c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a0c      	ldr	r2, [pc, #48]	; (8000ddc <ITM_SendChar+0x4c>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000db2:	bf00      	nop
 8000db4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d0f8      	beq.n	8000db4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000dc2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	6013      	str	r3, [r2, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000edfc 	.word	0xe000edfc
 8000ddc:	e0000e00 	.word	0xe0000e00

08000de0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	e00a      	b.n	8000e08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000df2:	f3af 8000 	nop.w
 8000df6:	4601      	mov	r1, r0
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	60ba      	str	r2, [r7, #8]
 8000dfe:	b2ca      	uxtb	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbf0      	blt.n	8000df2 <_read+0x12>
  }

  return len;
 8000e10:	687b      	ldr	r3, [r7, #4]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	e009      	b.n	8000e40 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	60ba      	str	r2, [r7, #8]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ffab 	bl	8000d90 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbf1      	blt.n	8000e2c <_write+0x12>
  }
  return len;
 8000e48:	687b      	ldr	r3, [r7, #4]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_close>:

int _close(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <_isatty>:

int _isatty(int file)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <_sbrk+0x5c>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <_sbrk+0x60>)
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <_sbrk+0x64>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <_sbrk+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d207      	bcs.n	8000efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eec:	f002 fbe0 	bl	80036b0 <__errno>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20020000 	.word	0x20020000
 8000f1c:	00000400 	.word	0x00000400
 8000f20:	20000114 	.word	0x20000114
 8000f24:	20000268 	.word	0x20000268

08000f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f52:	490e      	ldr	r1, [pc, #56]	; (8000f8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f68:	4c0b      	ldr	r4, [pc, #44]	; (8000f98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f76:	f7ff ffd7 	bl	8000f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f002 fb9f 	bl	80036bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fb33 	bl	80005e8 <main>
  bx  lr    
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f90:	08004224 	.word	0x08004224
  ldr r2, =_sbss
 8000f94:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f98:	20000268 	.word	0x20000268

08000f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <HAL_Init+0x40>)
 8000faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_Init+0x40>)
 8000fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_Init+0x40>)
 8000fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 ff6f 	bl	8001eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fe4e 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 ff87 	bl	8001f16 <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 ff4f 	bl	8001ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008
 8001068:	20000118 	.word	0x20000118

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000118 	.word	0x20000118

08001084 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e0ed      	b.n	8001272 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 3020 	ldrb.w	r3, [r3, #32]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d102      	bne.n	80010a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff fe08 	bl	8000cb8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0201 	orr.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010b8:	f7ff ffd8 	bl	800106c <HAL_GetTick>
 80010bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010be:	e012      	b.n	80010e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010c0:	f7ff ffd4 	bl	800106c <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b0a      	cmp	r3, #10
 80010cc:	d90b      	bls.n	80010e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2205      	movs	r2, #5
 80010de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e0c5      	b.n	8001272 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0e5      	beq.n	80010c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 0202 	bic.w	r2, r2, #2
 8001102:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001104:	f7ff ffb2 	bl	800106c <HAL_GetTick>
 8001108:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800110a:	e012      	b.n	8001132 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800110c:	f7ff ffae 	bl	800106c <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b0a      	cmp	r3, #10
 8001118:	d90b      	bls.n	8001132 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2205      	movs	r2, #5
 800112a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e09f      	b.n	8001272 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1e5      	bne.n	800110c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7e1b      	ldrb	r3, [r3, #24]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d108      	bne.n	800115a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	e007      	b.n	800116a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001168:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7e5b      	ldrb	r3, [r3, #25]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d108      	bne.n	8001184 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e007      	b.n	8001194 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001192:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7e9b      	ldrb	r3, [r3, #26]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d108      	bne.n	80011ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0220 	orr.w	r2, r2, #32
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	e007      	b.n	80011be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0220 	bic.w	r2, r2, #32
 80011bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7edb      	ldrb	r3, [r3, #27]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d108      	bne.n	80011d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0210 	bic.w	r2, r2, #16
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	e007      	b.n	80011e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0210 	orr.w	r2, r2, #16
 80011e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7f1b      	ldrb	r3, [r3, #28]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d108      	bne.n	8001202 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0208 	orr.w	r2, r2, #8
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	e007      	b.n	8001212 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0208 	bic.w	r2, r2, #8
 8001210:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7f5b      	ldrb	r3, [r3, #29]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d108      	bne.n	800122c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 0204 	orr.w	r2, r2, #4
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	e007      	b.n	800123c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0204 	bic.w	r2, r2, #4
 800123a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	431a      	orrs	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	ea42 0103 	orr.w	r1, r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001292:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001294:	7cfb      	ldrb	r3, [r7, #19]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d003      	beq.n	80012a2 <HAL_CAN_ConfigFilter+0x26>
 800129a:	7cfb      	ldrb	r3, [r7, #19]
 800129c:	2b02      	cmp	r3, #2
 800129e:	f040 80be 	bne.w	800141e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80012a2:	4b65      	ldr	r3, [pc, #404]	; (8001438 <HAL_CAN_ConfigFilter+0x1bc>)
 80012a4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012ac:	f043 0201 	orr.w	r2, r3, #1
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	431a      	orrs	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	f003 031f 	and.w	r3, r3, #31
 80012e2:	2201      	movs	r2, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	401a      	ands	r2, r3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d123      	bne.n	800134c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	43db      	mvns	r3, r3
 800130e:	401a      	ands	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001326:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3248      	adds	r2, #72	; 0x48
 800132c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001340:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001342:	6979      	ldr	r1, [r7, #20]
 8001344:	3348      	adds	r3, #72	; 0x48
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	440b      	add	r3, r1
 800134a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d122      	bne.n	800139a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	431a      	orrs	r2, r3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001374:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	3248      	adds	r2, #72	; 0x48
 800137a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800138e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001390:	6979      	ldr	r1, [r7, #20]
 8001392:	3348      	adds	r3, #72	; 0x48
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d109      	bne.n	80013b6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	401a      	ands	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013b4:	e007      	b.n	80013c6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	431a      	orrs	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d109      	bne.n	80013e2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	401a      	ands	r2, r3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80013e0:	e007      	b.n	80013f2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	431a      	orrs	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d107      	bne.n	800140a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	431a      	orrs	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001410:	f023 0201 	bic.w	r2, r3, #1
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	e006      	b.n	800142c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
  }
}
 800142c:	4618      	mov	r0, r3
 800142e:	371c      	adds	r7, #28
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40006400 	.word	0x40006400

0800143c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b01      	cmp	r3, #1
 800144e:	d12e      	bne.n	80014ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2202      	movs	r2, #2
 8001454:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0201 	bic.w	r2, r2, #1
 8001466:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001468:	f7ff fe00 	bl	800106c <HAL_GetTick>
 800146c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800146e:	e012      	b.n	8001496 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001470:	f7ff fdfc 	bl	800106c <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b0a      	cmp	r3, #10
 800147c:	d90b      	bls.n	8001496 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001482:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2205      	movs	r2, #5
 800148e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e012      	b.n	80014bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1e5      	bne.n	8001470 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e006      	b.n	80014bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
  }
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014e2:	7ffb      	ldrb	r3, [r7, #31]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d003      	beq.n	80014f0 <HAL_CAN_AddTxMessage+0x2c>
 80014e8:	7ffb      	ldrb	r3, [r7, #31]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	f040 80b8 	bne.w	8001660 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10a      	bne.n	8001510 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001500:	2b00      	cmp	r3, #0
 8001502:	d105      	bne.n	8001510 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 80a0 	beq.w	8001650 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	0e1b      	lsrs	r3, r3, #24
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d907      	bls.n	8001530 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e09e      	b.n	800166e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001530:	2201      	movs	r2, #1
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	409a      	lsls	r2, r3
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10d      	bne.n	800155e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800154c:	68f9      	ldr	r1, [r7, #12]
 800154e:	6809      	ldr	r1, [r1, #0]
 8001550:	431a      	orrs	r2, r3
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3318      	adds	r3, #24
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	440b      	add	r3, r1
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	e00f      	b.n	800157e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001568:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800156e:	68f9      	ldr	r1, [r7, #12]
 8001570:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001572:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	3318      	adds	r3, #24
 8001578:	011b      	lsls	r3, r3, #4
 800157a:	440b      	add	r3, r1
 800157c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6819      	ldr	r1, [r3, #0]
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	691a      	ldr	r2, [r3, #16]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3318      	adds	r3, #24
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	440b      	add	r3, r1
 800158e:	3304      	adds	r3, #4
 8001590:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	7d1b      	ldrb	r3, [r3, #20]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d111      	bne.n	80015be <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3318      	adds	r3, #24
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	4413      	add	r3, r2
 80015a6:	3304      	adds	r3, #4
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	6811      	ldr	r1, [r2, #0]
 80015ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3318      	adds	r3, #24
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	440b      	add	r3, r1
 80015ba:	3304      	adds	r3, #4
 80015bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3307      	adds	r3, #7
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	061a      	lsls	r2, r3, #24
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3306      	adds	r3, #6
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	041b      	lsls	r3, r3, #16
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3305      	adds	r3, #5
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	4313      	orrs	r3, r2
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	3204      	adds	r2, #4
 80015de:	7812      	ldrb	r2, [r2, #0]
 80015e0:	4610      	mov	r0, r2
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	6811      	ldr	r1, [r2, #0]
 80015e6:	ea43 0200 	orr.w	r2, r3, r0
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	440b      	add	r3, r1
 80015f0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80015f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3303      	adds	r3, #3
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	061a      	lsls	r2, r3, #24
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3302      	adds	r3, #2
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	041b      	lsls	r3, r3, #16
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3301      	adds	r3, #1
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	4313      	orrs	r3, r2
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	7812      	ldrb	r2, [r2, #0]
 8001616:	4610      	mov	r0, r2
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	6811      	ldr	r1, [r2, #0]
 800161c:	ea43 0200 	orr.w	r2, r3, r0
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	440b      	add	r3, r1
 8001626:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800162a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3318      	adds	r3, #24
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	4413      	add	r3, r2
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	6811      	ldr	r1, [r2, #0]
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	3318      	adds	r3, #24
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	440b      	add	r3, r1
 800164a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	e00e      	b.n	800166e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001654:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e006      	b.n	800166e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
  }
}
 800166e:	4618      	mov	r0, r3
 8001670:	3724      	adds	r7, #36	; 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800167a:	b480      	push	{r7}
 800167c:	b087      	sub	sp, #28
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800168e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001690:	7dfb      	ldrb	r3, [r7, #23]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d003      	beq.n	800169e <HAL_CAN_GetRxMessage+0x24>
 8001696:	7dfb      	ldrb	r3, [r7, #23]
 8001698:	2b02      	cmp	r3, #2
 800169a:	f040 80f3 	bne.w	8001884 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10e      	bne.n	80016c2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d116      	bne.n	80016e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e0e7      	b.n	8001892 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d107      	bne.n	80016e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0d8      	b.n	8001892 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	331b      	adds	r3, #27
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	4413      	add	r3, r2
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0204 	and.w	r2, r3, #4
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10c      	bne.n	8001718 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	331b      	adds	r3, #27
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	4413      	add	r3, r2
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	0d5b      	lsrs	r3, r3, #21
 800170e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e00b      	b.n	8001730 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	331b      	adds	r3, #27
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	4413      	add	r3, r2
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	08db      	lsrs	r3, r3, #3
 8001728:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	331b      	adds	r3, #27
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	4413      	add	r3, r2
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0202 	and.w	r2, r3, #2
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	331b      	adds	r3, #27
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	4413      	add	r3, r2
 8001752:	3304      	adds	r3, #4
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 020f 	and.w	r2, r3, #15
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	331b      	adds	r3, #27
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	4413      	add	r3, r2
 800176a:	3304      	adds	r3, #4
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	0a1b      	lsrs	r3, r3, #8
 8001770:	b2da      	uxtb	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	331b      	adds	r3, #27
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	4413      	add	r3, r2
 8001782:	3304      	adds	r3, #4
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	0c1b      	lsrs	r3, r3, #16
 8001788:	b29a      	uxth	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	4413      	add	r3, r2
 8001798:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	0a1a      	lsrs	r2, r3, #8
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	4413      	add	r3, r2
 80017c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	0c1a      	lsrs	r2, r3, #16
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	3302      	adds	r3, #2
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	4413      	add	r3, r2
 80017e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	0e1a      	lsrs	r2, r3, #24
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	3303      	adds	r3, #3
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	4413      	add	r3, r2
 80017fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	3304      	adds	r3, #4
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	4413      	add	r3, r2
 8001814:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	0a1a      	lsrs	r2, r3, #8
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	3305      	adds	r3, #5
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	4413      	add	r3, r2
 800182e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0c1a      	lsrs	r2, r3, #16
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	3306      	adds	r3, #6
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	4413      	add	r3, r2
 8001848:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	0e1a      	lsrs	r2, r3, #24
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	3307      	adds	r3, #7
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d108      	bne.n	8001870 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0220 	orr.w	r2, r2, #32
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	e007      	b.n	8001880 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	691a      	ldr	r2, [r3, #16]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0220 	orr.w	r2, r2, #32
 800187e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	e006      	b.n	8001892 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
  }
}
 8001892:	4618      	mov	r0, r3
 8001894:	371c      	adds	r7, #28
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800189e:	b480      	push	{r7}
 80018a0:	b085      	sub	sp, #20
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ae:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d002      	beq.n	80018bc <HAL_CAN_ActivateNotification+0x1e>
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d109      	bne.n	80018d0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6959      	ldr	r1, [r3, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	e006      	b.n	80018de <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
  }
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b08a      	sub	sp, #40	; 0x28
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b00      	cmp	r3, #0
 800192e:	d07c      	beq.n	8001a2a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d023      	beq.n	8001982 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2201      	movs	r2, #1
 8001940:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff f8dd 	bl	8000b0c <HAL_CAN_TxMailbox0CompleteCallback>
 8001952:	e016      	b.n	8001982 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
 8001966:	e00c      	b.n	8001982 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d004      	beq.n	800197c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
 800197a:	e002      	b.n	8001982 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f96b 	bl	8001c58 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001988:	2b00      	cmp	r3, #0
 800198a:	d024      	beq.n	80019d6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001994:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff f8c1 	bl	8000b28 <HAL_CAN_TxMailbox1CompleteCallback>
 80019a6:	e016      	b.n	80019d6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ba:	e00c      	b.n	80019d6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d004      	beq.n	80019d0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
 80019ce:	e002      	b.n	80019d6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f94b 	bl	8001c6c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d024      	beq.n	8001a2a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff f8a5 	bl	8000b44 <HAL_CAN_TxMailbox2CompleteCallback>
 80019fa:	e016      	b.n	8001a2a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d004      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0e:	e00c      	b.n	8001a2a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d004      	beq.n	8001a24 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
 8001a22:	e002      	b.n	8001a2a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f92b 	bl	8001c80 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00c      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2210      	movs	r2, #16
 8001a4c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00b      	beq.n	8001a70 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d006      	beq.n	8001a70 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2208      	movs	r2, #8
 8001a68:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f912 	bl	8001c94 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a70:	6a3b      	ldr	r3, [r7, #32]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d009      	beq.n	8001a8e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff f869 	bl	8000b60 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00c      	beq.n	8001ab2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d007      	beq.n	8001ab2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2210      	movs	r2, #16
 8001ab0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	f003 0320 	and.w	r3, r3, #32
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00b      	beq.n	8001ad4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d006      	beq.n	8001ad4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2208      	movs	r2, #8
 8001acc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f8f4 	bl	8001cbc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d009      	beq.n	8001af2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f8db 	bl	8001ca8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00b      	beq.n	8001b14 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d006      	beq.n	8001b14 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2210      	movs	r2, #16
 8001b0c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f8de 	bl	8001cd0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00b      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d006      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f8d7 	bl	8001ce4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d07b      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d072      	beq.n	8001c30 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d008      	beq.n	8001b82 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d043      	beq.n	8001c30 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d03e      	beq.n	8001c30 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bb8:	2b60      	cmp	r3, #96	; 0x60
 8001bba:	d02b      	beq.n	8001c14 <HAL_CAN_IRQHandler+0x32a>
 8001bbc:	2b60      	cmp	r3, #96	; 0x60
 8001bbe:	d82e      	bhi.n	8001c1e <HAL_CAN_IRQHandler+0x334>
 8001bc0:	2b50      	cmp	r3, #80	; 0x50
 8001bc2:	d022      	beq.n	8001c0a <HAL_CAN_IRQHandler+0x320>
 8001bc4:	2b50      	cmp	r3, #80	; 0x50
 8001bc6:	d82a      	bhi.n	8001c1e <HAL_CAN_IRQHandler+0x334>
 8001bc8:	2b40      	cmp	r3, #64	; 0x40
 8001bca:	d019      	beq.n	8001c00 <HAL_CAN_IRQHandler+0x316>
 8001bcc:	2b40      	cmp	r3, #64	; 0x40
 8001bce:	d826      	bhi.n	8001c1e <HAL_CAN_IRQHandler+0x334>
 8001bd0:	2b30      	cmp	r3, #48	; 0x30
 8001bd2:	d010      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x30c>
 8001bd4:	2b30      	cmp	r3, #48	; 0x30
 8001bd6:	d822      	bhi.n	8001c1e <HAL_CAN_IRQHandler+0x334>
 8001bd8:	2b10      	cmp	r3, #16
 8001bda:	d002      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x2f8>
 8001bdc:	2b20      	cmp	r3, #32
 8001bde:	d005      	beq.n	8001bec <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001be0:	e01d      	b.n	8001c1e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	f043 0308 	orr.w	r3, r3, #8
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bea:	e019      	b.n	8001c20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	f043 0310 	orr.w	r3, r3, #16
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bf4:	e014      	b.n	8001c20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	f043 0320 	orr.w	r3, r3, #32
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bfe:	e00f      	b.n	8001c20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c08:	e00a      	b.n	8001c20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c12:	e005      	b.n	8001c20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c1c:	e000      	b.n	8001c20 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c1e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699a      	ldr	r2, [r3, #24]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c2e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2204      	movs	r2, #4
 8001c36:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d008      	beq.n	8001c50 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f854 	bl	8001cf8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c50:	bf00      	nop
 8001c52:	3728      	adds	r7, #40	; 0x28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3e:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	60d3      	str	r3, [r2, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <__NVIC_GetPriorityGrouping+0x18>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	f003 0307 	and.w	r3, r3, #7
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	db0b      	blt.n	8001d9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	f003 021f 	and.w	r2, r3, #31
 8001d88:	4907      	ldr	r1, [pc, #28]	; (8001da8 <__NVIC_EnableIRQ+0x38>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	2001      	movs	r0, #1
 8001d92:	fa00 f202 	lsl.w	r2, r0, r2
 8001d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000e100 	.word	0xe000e100

08001dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	db0a      	blt.n	8001dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	; (8001df8 <__NVIC_SetPriority+0x4c>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	0112      	lsls	r2, r2, #4
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	440b      	add	r3, r1
 8001dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd4:	e00a      	b.n	8001dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4908      	ldr	r1, [pc, #32]	; (8001dfc <__NVIC_SetPriority+0x50>)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	3b04      	subs	r3, #4
 8001de4:	0112      	lsls	r2, r2, #4
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	761a      	strb	r2, [r3, #24]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000e100 	.word	0xe000e100
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f1c3 0307 	rsb	r3, r3, #7
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	bf28      	it	cs
 8001e1e:	2304      	movcs	r3, #4
 8001e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3304      	adds	r3, #4
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d902      	bls.n	8001e30 <NVIC_EncodePriority+0x30>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3b03      	subs	r3, #3
 8001e2e:	e000      	b.n	8001e32 <NVIC_EncodePriority+0x32>
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	401a      	ands	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e48:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	43d9      	mvns	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	4313      	orrs	r3, r2
         );
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3724      	adds	r7, #36	; 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e78:	d301      	bcc.n	8001e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00f      	b.n	8001e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <SysTick_Config+0x40>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e86:	210f      	movs	r1, #15
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f7ff ff8e 	bl	8001dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <SysTick_Config+0x40>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e96:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <SysTick_Config+0x40>)
 8001e98:	2207      	movs	r2, #7
 8001e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	e000e010 	.word	0xe000e010

08001eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ff29 	bl	8001d0c <__NVIC_SetPriorityGrouping>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed4:	f7ff ff3e 	bl	8001d54 <__NVIC_GetPriorityGrouping>
 8001ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	6978      	ldr	r0, [r7, #20]
 8001ee0:	f7ff ff8e 	bl	8001e00 <NVIC_EncodePriority>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff5d 	bl	8001dac <__NVIC_SetPriority>
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff31 	bl	8001d70 <__NVIC_EnableIRQ>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ffa2 	bl	8001e68 <SysTick_Config>
 8001f24:	4603      	mov	r3, r0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001f32:	f000 f802 	bl	8001f3a <HAL_SYSTICK_Callback>
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	e16b      	b.n	800223c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f64:	2201      	movs	r2, #1
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	f040 815a 	bne.w	8002236 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d005      	beq.n	8001f9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d130      	bne.n	8001ffc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 0201 	and.w	r2, r3, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b03      	cmp	r3, #3
 8002006:	d017      	beq.n	8002038 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d123      	bne.n	800208c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	08da      	lsrs	r2, r3, #3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3208      	adds	r2, #8
 800204c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	220f      	movs	r2, #15
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	08da      	lsrs	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3208      	adds	r2, #8
 8002086:	69b9      	ldr	r1, [r7, #24]
 8002088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0203 	and.w	r2, r3, #3
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80b4 	beq.w	8002236 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b60      	ldr	r3, [pc, #384]	; (8002254 <HAL_GPIO_Init+0x30c>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	4a5f      	ldr	r2, [pc, #380]	; (8002254 <HAL_GPIO_Init+0x30c>)
 80020d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020dc:	6453      	str	r3, [r2, #68]	; 0x44
 80020de:	4b5d      	ldr	r3, [pc, #372]	; (8002254 <HAL_GPIO_Init+0x30c>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ea:	4a5b      	ldr	r2, [pc, #364]	; (8002258 <HAL_GPIO_Init+0x310>)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	3302      	adds	r3, #2
 80020f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	220f      	movs	r2, #15
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a52      	ldr	r2, [pc, #328]	; (800225c <HAL_GPIO_Init+0x314>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d02b      	beq.n	800216e <HAL_GPIO_Init+0x226>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a51      	ldr	r2, [pc, #324]	; (8002260 <HAL_GPIO_Init+0x318>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d025      	beq.n	800216a <HAL_GPIO_Init+0x222>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a50      	ldr	r2, [pc, #320]	; (8002264 <HAL_GPIO_Init+0x31c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d01f      	beq.n	8002166 <HAL_GPIO_Init+0x21e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4f      	ldr	r2, [pc, #316]	; (8002268 <HAL_GPIO_Init+0x320>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d019      	beq.n	8002162 <HAL_GPIO_Init+0x21a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4e      	ldr	r2, [pc, #312]	; (800226c <HAL_GPIO_Init+0x324>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d013      	beq.n	800215e <HAL_GPIO_Init+0x216>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a4d      	ldr	r2, [pc, #308]	; (8002270 <HAL_GPIO_Init+0x328>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00d      	beq.n	800215a <HAL_GPIO_Init+0x212>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4c      	ldr	r2, [pc, #304]	; (8002274 <HAL_GPIO_Init+0x32c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d007      	beq.n	8002156 <HAL_GPIO_Init+0x20e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4b      	ldr	r2, [pc, #300]	; (8002278 <HAL_GPIO_Init+0x330>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d101      	bne.n	8002152 <HAL_GPIO_Init+0x20a>
 800214e:	2307      	movs	r3, #7
 8002150:	e00e      	b.n	8002170 <HAL_GPIO_Init+0x228>
 8002152:	2308      	movs	r3, #8
 8002154:	e00c      	b.n	8002170 <HAL_GPIO_Init+0x228>
 8002156:	2306      	movs	r3, #6
 8002158:	e00a      	b.n	8002170 <HAL_GPIO_Init+0x228>
 800215a:	2305      	movs	r3, #5
 800215c:	e008      	b.n	8002170 <HAL_GPIO_Init+0x228>
 800215e:	2304      	movs	r3, #4
 8002160:	e006      	b.n	8002170 <HAL_GPIO_Init+0x228>
 8002162:	2303      	movs	r3, #3
 8002164:	e004      	b.n	8002170 <HAL_GPIO_Init+0x228>
 8002166:	2302      	movs	r3, #2
 8002168:	e002      	b.n	8002170 <HAL_GPIO_Init+0x228>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <HAL_GPIO_Init+0x228>
 800216e:	2300      	movs	r3, #0
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	f002 0203 	and.w	r2, r2, #3
 8002176:	0092      	lsls	r2, r2, #2
 8002178:	4093      	lsls	r3, r2
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002180:	4935      	ldr	r1, [pc, #212]	; (8002258 <HAL_GPIO_Init+0x310>)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	3302      	adds	r3, #2
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800218e:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_GPIO_Init+0x334>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021b2:	4a32      	ldr	r2, [pc, #200]	; (800227c <HAL_GPIO_Init+0x334>)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b8:	4b30      	ldr	r3, [pc, #192]	; (800227c <HAL_GPIO_Init+0x334>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021dc:	4a27      	ldr	r2, [pc, #156]	; (800227c <HAL_GPIO_Init+0x334>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021e2:	4b26      	ldr	r3, [pc, #152]	; (800227c <HAL_GPIO_Init+0x334>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002206:	4a1d      	ldr	r2, [pc, #116]	; (800227c <HAL_GPIO_Init+0x334>)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <HAL_GPIO_Init+0x334>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002230:	4a12      	ldr	r2, [pc, #72]	; (800227c <HAL_GPIO_Init+0x334>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3301      	adds	r3, #1
 800223a:	61fb      	str	r3, [r7, #28]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	2b0f      	cmp	r3, #15
 8002240:	f67f ae90 	bls.w	8001f64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	3724      	adds	r7, #36	; 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800
 8002258:	40013800 	.word	0x40013800
 800225c:	40020000 	.word	0x40020000
 8002260:	40020400 	.word	0x40020400
 8002264:	40020800 	.word	0x40020800
 8002268:	40020c00 	.word	0x40020c00
 800226c:	40021000 	.word	0x40021000
 8002270:	40021400 	.word	0x40021400
 8002274:	40021800 	.word	0x40021800
 8002278:	40021c00 	.word	0x40021c00
 800227c:	40013c00 	.word	0x40013c00

08002280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	807b      	strh	r3, [r7, #2]
 800228c:	4613      	mov	r3, r2
 800228e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002290:	787b      	ldrb	r3, [r7, #1]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002296:	887a      	ldrh	r2, [r7, #2]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800229c:	e003      	b.n	80022a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800229e:	887b      	ldrh	r3, [r7, #2]
 80022a0:	041a      	lsls	r2, r3, #16
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	619a      	str	r2, [r3, #24]
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022c0:	695a      	ldr	r2, [r3, #20]
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d006      	beq.n	80022d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022ca:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022d0:	88fb      	ldrh	r3, [r7, #6]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 f806 	bl	80022e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40013c00 	.word	0x40013c00

080022e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e267      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d075      	beq.n	8002406 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800231a:	4b88      	ldr	r3, [pc, #544]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b04      	cmp	r3, #4
 8002324:	d00c      	beq.n	8002340 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002326:	4b85      	ldr	r3, [pc, #532]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800232e:	2b08      	cmp	r3, #8
 8002330:	d112      	bne.n	8002358 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002332:	4b82      	ldr	r3, [pc, #520]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800233e:	d10b      	bne.n	8002358 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002340:	4b7e      	ldr	r3, [pc, #504]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d05b      	beq.n	8002404 <HAL_RCC_OscConfig+0x108>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d157      	bne.n	8002404 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e242      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002360:	d106      	bne.n	8002370 <HAL_RCC_OscConfig+0x74>
 8002362:	4b76      	ldr	r3, [pc, #472]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a75      	ldr	r2, [pc, #468]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e01d      	b.n	80023ac <HAL_RCC_OscConfig+0xb0>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0x98>
 800237a:	4b70      	ldr	r3, [pc, #448]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a6f      	ldr	r2, [pc, #444]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	4b6d      	ldr	r3, [pc, #436]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a6c      	ldr	r2, [pc, #432]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800238c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0xb0>
 8002394:	4b69      	ldr	r3, [pc, #420]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a68      	ldr	r2, [pc, #416]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800239a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b66      	ldr	r3, [pc, #408]	; (800253c <HAL_RCC_OscConfig+0x240>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a65      	ldr	r2, [pc, #404]	; (800253c <HAL_RCC_OscConfig+0x240>)
 80023a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7fe fe5a 	bl	800106c <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023bc:	f7fe fe56 	bl	800106c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	; 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e207      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	4b5b      	ldr	r3, [pc, #364]	; (800253c <HAL_RCC_OscConfig+0x240>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0xc0>
 80023da:	e014      	b.n	8002406 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7fe fe46 	bl	800106c <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e4:	f7fe fe42 	bl	800106c <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e1f3      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f6:	4b51      	ldr	r3, [pc, #324]	; (800253c <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0xe8>
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d063      	beq.n	80024da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002412:	4b4a      	ldr	r3, [pc, #296]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241e:	4b47      	ldr	r3, [pc, #284]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002426:	2b08      	cmp	r3, #8
 8002428:	d11c      	bne.n	8002464 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800242a:	4b44      	ldr	r3, [pc, #272]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d116      	bne.n	8002464 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002436:	4b41      	ldr	r3, [pc, #260]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_RCC_OscConfig+0x152>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d001      	beq.n	800244e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e1c7      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244e:	4b3b      	ldr	r3, [pc, #236]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4937      	ldr	r1, [pc, #220]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	e03a      	b.n	80024da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d020      	beq.n	80024ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800246c:	4b34      	ldr	r3, [pc, #208]	; (8002540 <HAL_RCC_OscConfig+0x244>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002472:	f7fe fdfb 	bl	800106c <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800247a:	f7fe fdf7 	bl	800106c <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e1a8      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248c:	4b2b      	ldr	r3, [pc, #172]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002498:	4b28      	ldr	r3, [pc, #160]	; (800253c <HAL_RCC_OscConfig+0x240>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4925      	ldr	r1, [pc, #148]	; (800253c <HAL_RCC_OscConfig+0x240>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]
 80024ac:	e015      	b.n	80024da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ae:	4b24      	ldr	r3, [pc, #144]	; (8002540 <HAL_RCC_OscConfig+0x244>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7fe fdda 	bl	800106c <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024bc:	f7fe fdd6 	bl	800106c <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e187      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	4b1b      	ldr	r3, [pc, #108]	; (800253c <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d036      	beq.n	8002554 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d016      	beq.n	800251c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <HAL_RCC_OscConfig+0x248>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f4:	f7fe fdba 	bl	800106c <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024fc:	f7fe fdb6 	bl	800106c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e167      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <HAL_RCC_OscConfig+0x240>)
 8002510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x200>
 800251a:	e01b      	b.n	8002554 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_RCC_OscConfig+0x248>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002522:	f7fe fda3 	bl	800106c <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002528:	e00e      	b.n	8002548 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800252a:	f7fe fd9f 	bl	800106c <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d907      	bls.n	8002548 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e150      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 800253c:	40023800 	.word	0x40023800
 8002540:	42470000 	.word	0x42470000
 8002544:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002548:	4b88      	ldr	r3, [pc, #544]	; (800276c <HAL_RCC_OscConfig+0x470>)
 800254a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1ea      	bne.n	800252a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 8097 	beq.w	8002690 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002562:	2300      	movs	r3, #0
 8002564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002566:	4b81      	ldr	r3, [pc, #516]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10f      	bne.n	8002592 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	4b7d      	ldr	r3, [pc, #500]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4a7c      	ldr	r2, [pc, #496]	; (800276c <HAL_RCC_OscConfig+0x470>)
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
 8002582:	4b7a      	ldr	r3, [pc, #488]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258e:	2301      	movs	r3, #1
 8002590:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002592:	4b77      	ldr	r3, [pc, #476]	; (8002770 <HAL_RCC_OscConfig+0x474>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259a:	2b00      	cmp	r3, #0
 800259c:	d118      	bne.n	80025d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800259e:	4b74      	ldr	r3, [pc, #464]	; (8002770 <HAL_RCC_OscConfig+0x474>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a73      	ldr	r2, [pc, #460]	; (8002770 <HAL_RCC_OscConfig+0x474>)
 80025a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025aa:	f7fe fd5f 	bl	800106c <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b2:	f7fe fd5b 	bl	800106c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e10c      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c4:	4b6a      	ldr	r3, [pc, #424]	; (8002770 <HAL_RCC_OscConfig+0x474>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d106      	bne.n	80025e6 <HAL_RCC_OscConfig+0x2ea>
 80025d8:	4b64      	ldr	r3, [pc, #400]	; (800276c <HAL_RCC_OscConfig+0x470>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025dc:	4a63      	ldr	r2, [pc, #396]	; (800276c <HAL_RCC_OscConfig+0x470>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6713      	str	r3, [r2, #112]	; 0x70
 80025e4:	e01c      	b.n	8002620 <HAL_RCC_OscConfig+0x324>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b05      	cmp	r3, #5
 80025ec:	d10c      	bne.n	8002608 <HAL_RCC_OscConfig+0x30c>
 80025ee:	4b5f      	ldr	r3, [pc, #380]	; (800276c <HAL_RCC_OscConfig+0x470>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f2:	4a5e      	ldr	r2, [pc, #376]	; (800276c <HAL_RCC_OscConfig+0x470>)
 80025f4:	f043 0304 	orr.w	r3, r3, #4
 80025f8:	6713      	str	r3, [r2, #112]	; 0x70
 80025fa:	4b5c      	ldr	r3, [pc, #368]	; (800276c <HAL_RCC_OscConfig+0x470>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	4a5b      	ldr	r2, [pc, #364]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6713      	str	r3, [r2, #112]	; 0x70
 8002606:	e00b      	b.n	8002620 <HAL_RCC_OscConfig+0x324>
 8002608:	4b58      	ldr	r3, [pc, #352]	; (800276c <HAL_RCC_OscConfig+0x470>)
 800260a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260c:	4a57      	ldr	r2, [pc, #348]	; (800276c <HAL_RCC_OscConfig+0x470>)
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	6713      	str	r3, [r2, #112]	; 0x70
 8002614:	4b55      	ldr	r3, [pc, #340]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	4a54      	ldr	r2, [pc, #336]	; (800276c <HAL_RCC_OscConfig+0x470>)
 800261a:	f023 0304 	bic.w	r3, r3, #4
 800261e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d015      	beq.n	8002654 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7fe fd20 	bl	800106c <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262e:	e00a      	b.n	8002646 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002630:	f7fe fd1c 	bl	800106c <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f241 3288 	movw	r2, #5000	; 0x1388
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e0cb      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002646:	4b49      	ldr	r3, [pc, #292]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0ee      	beq.n	8002630 <HAL_RCC_OscConfig+0x334>
 8002652:	e014      	b.n	800267e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002654:	f7fe fd0a 	bl	800106c <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265a:	e00a      	b.n	8002672 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800265c:	f7fe fd06 	bl	800106c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	; 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e0b5      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002672:	4b3e      	ldr	r3, [pc, #248]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1ee      	bne.n	800265c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800267e:	7dfb      	ldrb	r3, [r7, #23]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d105      	bne.n	8002690 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002684:	4b39      	ldr	r3, [pc, #228]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	4a38      	ldr	r2, [pc, #224]	; (800276c <HAL_RCC_OscConfig+0x470>)
 800268a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800268e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 80a1 	beq.w	80027dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800269a:	4b34      	ldr	r3, [pc, #208]	; (800276c <HAL_RCC_OscConfig+0x470>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d05c      	beq.n	8002760 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d141      	bne.n	8002732 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ae:	4b31      	ldr	r3, [pc, #196]	; (8002774 <HAL_RCC_OscConfig+0x478>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7fe fcda 	bl	800106c <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026bc:	f7fe fcd6 	bl	800106c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e087      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ce:	4b27      	ldr	r3, [pc, #156]	; (800276c <HAL_RCC_OscConfig+0x470>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69da      	ldr	r2, [r3, #28]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	019b      	lsls	r3, r3, #6
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	085b      	lsrs	r3, r3, #1
 80026f2:	3b01      	subs	r3, #1
 80026f4:	041b      	lsls	r3, r3, #16
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	061b      	lsls	r3, r3, #24
 80026fe:	491b      	ldr	r1, [pc, #108]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002704:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <HAL_RCC_OscConfig+0x478>)
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7fe fcaf 	bl	800106c <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002712:	f7fe fcab 	bl	800106c <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e05c      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x416>
 8002730:	e054      	b.n	80027dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <HAL_RCC_OscConfig+0x478>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7fe fc98 	bl	800106c <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002740:	f7fe fc94 	bl	800106c <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e045      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_RCC_OscConfig+0x470>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x444>
 800275e:	e03d      	b.n	80027dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d107      	bne.n	8002778 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e038      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 800276c:	40023800 	.word	0x40023800
 8002770:	40007000 	.word	0x40007000
 8002774:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002778:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <HAL_RCC_OscConfig+0x4ec>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d028      	beq.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d121      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d11a      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027a8:	4013      	ands	r3, r2
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d111      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	3b01      	subs	r3, #1
 80027c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d107      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800

080027ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0cc      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002800:	4b68      	ldr	r3, [pc, #416]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d90c      	bls.n	8002828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b65      	ldr	r3, [pc, #404]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b63      	ldr	r3, [pc, #396]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0b8      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d020      	beq.n	8002876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002840:	4b59      	ldr	r3, [pc, #356]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4a58      	ldr	r2, [pc, #352]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800284a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002858:	4b53      	ldr	r3, [pc, #332]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	4a52      	ldr	r2, [pc, #328]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002864:	4b50      	ldr	r3, [pc, #320]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	494d      	ldr	r1, [pc, #308]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d044      	beq.n	800290c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d107      	bne.n	800289a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d119      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e07f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d003      	beq.n	80028aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028aa:	4b3f      	ldr	r3, [pc, #252]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e06f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ba:	4b3b      	ldr	r3, [pc, #236]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e067      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ca:	4b37      	ldr	r3, [pc, #220]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f023 0203 	bic.w	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4934      	ldr	r1, [pc, #208]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028dc:	f7fe fbc6 	bl	800106c <HAL_GetTick>
 80028e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e4:	f7fe fbc2 	bl	800106c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e04f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 020c 	and.w	r2, r3, #12
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	429a      	cmp	r2, r3
 800290a:	d1eb      	bne.n	80028e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800290c:	4b25      	ldr	r3, [pc, #148]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d20c      	bcs.n	8002934 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e032      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002940:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4916      	ldr	r1, [pc, #88]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	4313      	orrs	r3, r2
 8002950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800295e:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	490e      	ldr	r1, [pc, #56]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002972:	f000 f821 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8002976:	4602      	mov	r2, r0
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	490a      	ldr	r1, [pc, #40]	; (80029ac <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	5ccb      	ldrb	r3, [r1, r3]
 8002986:	fa22 f303 	lsr.w	r3, r2, r3
 800298a:	4a09      	ldr	r2, [pc, #36]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe fb26 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023c00 	.word	0x40023c00
 80029a8:	40023800 	.word	0x40023800
 80029ac:	080041d0 	.word	0x080041d0
 80029b0:	20000000 	.word	0x20000000
 80029b4:	20000004 	.word	0x20000004

080029b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029bc:	b094      	sub	sp, #80	; 0x50
 80029be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	647b      	str	r3, [r7, #68]	; 0x44
 80029c4:	2300      	movs	r3, #0
 80029c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029c8:	2300      	movs	r3, #0
 80029ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029d0:	4b79      	ldr	r3, [pc, #484]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d00d      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0x40>
 80029dc:	2b08      	cmp	r3, #8
 80029de:	f200 80e1 	bhi.w	8002ba4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0x34>
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d003      	beq.n	80029f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ea:	e0db      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ec:	4b73      	ldr	r3, [pc, #460]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x204>)
 80029ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80029f0:	e0db      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029f2:	4b73      	ldr	r3, [pc, #460]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x208>)
 80029f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029f6:	e0d8      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029f8:	4b6f      	ldr	r3, [pc, #444]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a00:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a02:	4b6d      	ldr	r3, [pc, #436]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d063      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a0e:	4b6a      	ldr	r3, [pc, #424]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	099b      	lsrs	r3, r3, #6
 8002a14:	2200      	movs	r2, #0
 8002a16:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a20:	633b      	str	r3, [r7, #48]	; 0x30
 8002a22:	2300      	movs	r3, #0
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
 8002a26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a2a:	4622      	mov	r2, r4
 8002a2c:	462b      	mov	r3, r5
 8002a2e:	f04f 0000 	mov.w	r0, #0
 8002a32:	f04f 0100 	mov.w	r1, #0
 8002a36:	0159      	lsls	r1, r3, #5
 8002a38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a3c:	0150      	lsls	r0, r2, #5
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4621      	mov	r1, r4
 8002a44:	1a51      	subs	r1, r2, r1
 8002a46:	6139      	str	r1, [r7, #16]
 8002a48:	4629      	mov	r1, r5
 8002a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a5c:	4659      	mov	r1, fp
 8002a5e:	018b      	lsls	r3, r1, #6
 8002a60:	4651      	mov	r1, sl
 8002a62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a66:	4651      	mov	r1, sl
 8002a68:	018a      	lsls	r2, r1, #6
 8002a6a:	4651      	mov	r1, sl
 8002a6c:	ebb2 0801 	subs.w	r8, r2, r1
 8002a70:	4659      	mov	r1, fp
 8002a72:	eb63 0901 	sbc.w	r9, r3, r1
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a8a:	4690      	mov	r8, r2
 8002a8c:	4699      	mov	r9, r3
 8002a8e:	4623      	mov	r3, r4
 8002a90:	eb18 0303 	adds.w	r3, r8, r3
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	462b      	mov	r3, r5
 8002a98:	eb49 0303 	adc.w	r3, r9, r3
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002aaa:	4629      	mov	r1, r5
 8002aac:	024b      	lsls	r3, r1, #9
 8002aae:	4621      	mov	r1, r4
 8002ab0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ab4:	4621      	mov	r1, r4
 8002ab6:	024a      	lsls	r2, r1, #9
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002abe:	2200      	movs	r2, #0
 8002ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ac4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ac8:	f7fd fbd2 	bl	8000270 <__aeabi_uldivmod>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ad4:	e058      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad6:	4b38      	ldr	r3, [pc, #224]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	099b      	lsrs	r3, r3, #6
 8002adc:	2200      	movs	r2, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ae6:	623b      	str	r3, [r7, #32]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
 8002aec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002af0:	4642      	mov	r2, r8
 8002af2:	464b      	mov	r3, r9
 8002af4:	f04f 0000 	mov.w	r0, #0
 8002af8:	f04f 0100 	mov.w	r1, #0
 8002afc:	0159      	lsls	r1, r3, #5
 8002afe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b02:	0150      	lsls	r0, r2, #5
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4641      	mov	r1, r8
 8002b0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b0e:	4649      	mov	r1, r9
 8002b10:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b28:	ebb2 040a 	subs.w	r4, r2, sl
 8002b2c:	eb63 050b 	sbc.w	r5, r3, fp
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	00eb      	lsls	r3, r5, #3
 8002b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b3e:	00e2      	lsls	r2, r4, #3
 8002b40:	4614      	mov	r4, r2
 8002b42:	461d      	mov	r5, r3
 8002b44:	4643      	mov	r3, r8
 8002b46:	18e3      	adds	r3, r4, r3
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	464b      	mov	r3, r9
 8002b4c:	eb45 0303 	adc.w	r3, r5, r3
 8002b50:	607b      	str	r3, [r7, #4]
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b5e:	4629      	mov	r1, r5
 8002b60:	028b      	lsls	r3, r1, #10
 8002b62:	4621      	mov	r1, r4
 8002b64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b68:	4621      	mov	r1, r4
 8002b6a:	028a      	lsls	r2, r1, #10
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b72:	2200      	movs	r2, #0
 8002b74:	61bb      	str	r3, [r7, #24]
 8002b76:	61fa      	str	r2, [r7, #28]
 8002b78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b7c:	f7fd fb78 	bl	8000270 <__aeabi_uldivmod>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4613      	mov	r3, r2
 8002b86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	3301      	adds	r3, #1
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ba2:	e002      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ba6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3750      	adds	r7, #80	; 0x50
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	00f42400 	.word	0x00f42400
 8002bc0:	007a1200 	.word	0x007a1200

08002bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e041      	b.n	8002c5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fe f8b0 	bl	8000d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	4619      	mov	r1, r3
 8002c02:	4610      	mov	r0, r2
 8002c04:	f000 f9ce 	bl	8002fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d001      	beq.n	8002c7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e04e      	b.n	8002d1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a23      	ldr	r2, [pc, #140]	; (8002d28 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d022      	beq.n	8002ce4 <HAL_TIM_Base_Start_IT+0x80>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca6:	d01d      	beq.n	8002ce4 <HAL_TIM_Base_Start_IT+0x80>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a1f      	ldr	r2, [pc, #124]	; (8002d2c <HAL_TIM_Base_Start_IT+0xc8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d018      	beq.n	8002ce4 <HAL_TIM_Base_Start_IT+0x80>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a1e      	ldr	r2, [pc, #120]	; (8002d30 <HAL_TIM_Base_Start_IT+0xcc>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d013      	beq.n	8002ce4 <HAL_TIM_Base_Start_IT+0x80>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	; (8002d34 <HAL_TIM_Base_Start_IT+0xd0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00e      	beq.n	8002ce4 <HAL_TIM_Base_Start_IT+0x80>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d009      	beq.n	8002ce4 <HAL_TIM_Base_Start_IT+0x80>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a19      	ldr	r2, [pc, #100]	; (8002d3c <HAL_TIM_Base_Start_IT+0xd8>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d004      	beq.n	8002ce4 <HAL_TIM_Base_Start_IT+0x80>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a18      	ldr	r2, [pc, #96]	; (8002d40 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d111      	bne.n	8002d08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b06      	cmp	r3, #6
 8002cf4:	d010      	beq.n	8002d18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0201 	orr.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d06:	e007      	b.n	8002d18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40010000 	.word	0x40010000
 8002d2c:	40000400 	.word	0x40000400
 8002d30:	40000800 	.word	0x40000800
 8002d34:	40000c00 	.word	0x40000c00
 8002d38:	40010400 	.word	0x40010400
 8002d3c:	40014000 	.word	0x40014000
 8002d40:	40001800 	.word	0x40001800

08002d44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d122      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d11b      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f06f 0202 	mvn.w	r2, #2
 8002d70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f8ee 	bl	8002f68 <HAL_TIM_IC_CaptureCallback>
 8002d8c:	e005      	b.n	8002d9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f8e0 	bl	8002f54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f8f1 	bl	8002f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d122      	bne.n	8002df4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d11b      	bne.n	8002df4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0204 	mvn.w	r2, #4
 8002dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f8c4 	bl	8002f68 <HAL_TIM_IC_CaptureCallback>
 8002de0:	e005      	b.n	8002dee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f8b6 	bl	8002f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f8c7 	bl	8002f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d122      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d11b      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0208 	mvn.w	r2, #8
 8002e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f89a 	bl	8002f68 <HAL_TIM_IC_CaptureCallback>
 8002e34:	e005      	b.n	8002e42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f88c 	bl	8002f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f89d 	bl	8002f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	2b10      	cmp	r3, #16
 8002e54:	d122      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b10      	cmp	r3, #16
 8002e62:	d11b      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0210 	mvn.w	r2, #16
 8002e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2208      	movs	r2, #8
 8002e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f870 	bl	8002f68 <HAL_TIM_IC_CaptureCallback>
 8002e88:	e005      	b.n	8002e96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f862 	bl	8002f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f873 	bl	8002f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d10e      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d107      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0201 	mvn.w	r2, #1
 8002ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fd fe9c 	bl	8000c00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed2:	2b80      	cmp	r3, #128	; 0x80
 8002ed4:	d10e      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee0:	2b80      	cmp	r3, #128	; 0x80
 8002ee2:	d107      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f97e 	bl	80031f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efe:	2b40      	cmp	r3, #64	; 0x40
 8002f00:	d10e      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0c:	2b40      	cmp	r3, #64	; 0x40
 8002f0e:	d107      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f838 	bl	8002f90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0320 	and.w	r3, r3, #32
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	d10e      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d107      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0220 	mvn.w	r2, #32
 8002f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f948 	bl	80031dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a40      	ldr	r2, [pc, #256]	; (80030b8 <TIM_Base_SetConfig+0x114>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d013      	beq.n	8002fe4 <TIM_Base_SetConfig+0x40>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc2:	d00f      	beq.n	8002fe4 <TIM_Base_SetConfig+0x40>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a3d      	ldr	r2, [pc, #244]	; (80030bc <TIM_Base_SetConfig+0x118>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00b      	beq.n	8002fe4 <TIM_Base_SetConfig+0x40>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a3c      	ldr	r2, [pc, #240]	; (80030c0 <TIM_Base_SetConfig+0x11c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d007      	beq.n	8002fe4 <TIM_Base_SetConfig+0x40>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a3b      	ldr	r2, [pc, #236]	; (80030c4 <TIM_Base_SetConfig+0x120>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d003      	beq.n	8002fe4 <TIM_Base_SetConfig+0x40>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a3a      	ldr	r2, [pc, #232]	; (80030c8 <TIM_Base_SetConfig+0x124>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d108      	bne.n	8002ff6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a2f      	ldr	r2, [pc, #188]	; (80030b8 <TIM_Base_SetConfig+0x114>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d02b      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003004:	d027      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a2c      	ldr	r2, [pc, #176]	; (80030bc <TIM_Base_SetConfig+0x118>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d023      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a2b      	ldr	r2, [pc, #172]	; (80030c0 <TIM_Base_SetConfig+0x11c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d01f      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a2a      	ldr	r2, [pc, #168]	; (80030c4 <TIM_Base_SetConfig+0x120>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d01b      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a29      	ldr	r2, [pc, #164]	; (80030c8 <TIM_Base_SetConfig+0x124>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d017      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a28      	ldr	r2, [pc, #160]	; (80030cc <TIM_Base_SetConfig+0x128>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d013      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a27      	ldr	r2, [pc, #156]	; (80030d0 <TIM_Base_SetConfig+0x12c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d00f      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a26      	ldr	r2, [pc, #152]	; (80030d4 <TIM_Base_SetConfig+0x130>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00b      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a25      	ldr	r2, [pc, #148]	; (80030d8 <TIM_Base_SetConfig+0x134>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d007      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a24      	ldr	r2, [pc, #144]	; (80030dc <TIM_Base_SetConfig+0x138>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d003      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a23      	ldr	r2, [pc, #140]	; (80030e0 <TIM_Base_SetConfig+0x13c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d108      	bne.n	8003068 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a0a      	ldr	r2, [pc, #40]	; (80030b8 <TIM_Base_SetConfig+0x114>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d003      	beq.n	800309c <TIM_Base_SetConfig+0xf8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a0c      	ldr	r2, [pc, #48]	; (80030c8 <TIM_Base_SetConfig+0x124>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d103      	bne.n	80030a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	615a      	str	r2, [r3, #20]
}
 80030aa:	bf00      	nop
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40010000 	.word	0x40010000
 80030bc:	40000400 	.word	0x40000400
 80030c0:	40000800 	.word	0x40000800
 80030c4:	40000c00 	.word	0x40000c00
 80030c8:	40010400 	.word	0x40010400
 80030cc:	40014000 	.word	0x40014000
 80030d0:	40014400 	.word	0x40014400
 80030d4:	40014800 	.word	0x40014800
 80030d8:	40001800 	.word	0x40001800
 80030dc:	40001c00 	.word	0x40001c00
 80030e0:	40002000 	.word	0x40002000

080030e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e05a      	b.n	80031b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a21      	ldr	r2, [pc, #132]	; (80031c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d022      	beq.n	8003186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003148:	d01d      	beq.n	8003186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a1d      	ldr	r2, [pc, #116]	; (80031c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d018      	beq.n	8003186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1b      	ldr	r2, [pc, #108]	; (80031c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a1a      	ldr	r2, [pc, #104]	; (80031cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d00e      	beq.n	8003186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a18      	ldr	r2, [pc, #96]	; (80031d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d009      	beq.n	8003186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a17      	ldr	r2, [pc, #92]	; (80031d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d004      	beq.n	8003186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a15      	ldr	r2, [pc, #84]	; (80031d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d10c      	bne.n	80031a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800318c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	4313      	orrs	r3, r2
 8003196:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40010000 	.word	0x40010000
 80031c4:	40000400 	.word	0x40000400
 80031c8:	40000800 	.word	0x40000800
 80031cc:	40000c00 	.word	0x40000c00
 80031d0:	40010400 	.word	0x40010400
 80031d4:	40014000 	.word	0x40014000
 80031d8:	40001800 	.word	0x40001800

080031dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <std>:
 8003204:	2300      	movs	r3, #0
 8003206:	b510      	push	{r4, lr}
 8003208:	4604      	mov	r4, r0
 800320a:	e9c0 3300 	strd	r3, r3, [r0]
 800320e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003212:	6083      	str	r3, [r0, #8]
 8003214:	8181      	strh	r1, [r0, #12]
 8003216:	6643      	str	r3, [r0, #100]	; 0x64
 8003218:	81c2      	strh	r2, [r0, #14]
 800321a:	6183      	str	r3, [r0, #24]
 800321c:	4619      	mov	r1, r3
 800321e:	2208      	movs	r2, #8
 8003220:	305c      	adds	r0, #92	; 0x5c
 8003222:	f000 f9f7 	bl	8003614 <memset>
 8003226:	4b0d      	ldr	r3, [pc, #52]	; (800325c <std+0x58>)
 8003228:	6263      	str	r3, [r4, #36]	; 0x24
 800322a:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <std+0x5c>)
 800322c:	62a3      	str	r3, [r4, #40]	; 0x28
 800322e:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <std+0x60>)
 8003230:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003232:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <std+0x64>)
 8003234:	6323      	str	r3, [r4, #48]	; 0x30
 8003236:	4b0d      	ldr	r3, [pc, #52]	; (800326c <std+0x68>)
 8003238:	6224      	str	r4, [r4, #32]
 800323a:	429c      	cmp	r4, r3
 800323c:	d006      	beq.n	800324c <std+0x48>
 800323e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003242:	4294      	cmp	r4, r2
 8003244:	d002      	beq.n	800324c <std+0x48>
 8003246:	33d0      	adds	r3, #208	; 0xd0
 8003248:	429c      	cmp	r4, r3
 800324a:	d105      	bne.n	8003258 <std+0x54>
 800324c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003254:	f000 ba56 	b.w	8003704 <__retarget_lock_init_recursive>
 8003258:	bd10      	pop	{r4, pc}
 800325a:	bf00      	nop
 800325c:	08003465 	.word	0x08003465
 8003260:	08003487 	.word	0x08003487
 8003264:	080034bf 	.word	0x080034bf
 8003268:	080034e3 	.word	0x080034e3
 800326c:	2000011c 	.word	0x2000011c

08003270 <stdio_exit_handler>:
 8003270:	4a02      	ldr	r2, [pc, #8]	; (800327c <stdio_exit_handler+0xc>)
 8003272:	4903      	ldr	r1, [pc, #12]	; (8003280 <stdio_exit_handler+0x10>)
 8003274:	4803      	ldr	r0, [pc, #12]	; (8003284 <stdio_exit_handler+0x14>)
 8003276:	f000 b869 	b.w	800334c <_fwalk_sglue>
 800327a:	bf00      	nop
 800327c:	2000000c 	.word	0x2000000c
 8003280:	08003fb1 	.word	0x08003fb1
 8003284:	20000018 	.word	0x20000018

08003288 <cleanup_stdio>:
 8003288:	6841      	ldr	r1, [r0, #4]
 800328a:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <cleanup_stdio+0x34>)
 800328c:	4299      	cmp	r1, r3
 800328e:	b510      	push	{r4, lr}
 8003290:	4604      	mov	r4, r0
 8003292:	d001      	beq.n	8003298 <cleanup_stdio+0x10>
 8003294:	f000 fe8c 	bl	8003fb0 <_fflush_r>
 8003298:	68a1      	ldr	r1, [r4, #8]
 800329a:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <cleanup_stdio+0x38>)
 800329c:	4299      	cmp	r1, r3
 800329e:	d002      	beq.n	80032a6 <cleanup_stdio+0x1e>
 80032a0:	4620      	mov	r0, r4
 80032a2:	f000 fe85 	bl	8003fb0 <_fflush_r>
 80032a6:	68e1      	ldr	r1, [r4, #12]
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <cleanup_stdio+0x3c>)
 80032aa:	4299      	cmp	r1, r3
 80032ac:	d004      	beq.n	80032b8 <cleanup_stdio+0x30>
 80032ae:	4620      	mov	r0, r4
 80032b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032b4:	f000 be7c 	b.w	8003fb0 <_fflush_r>
 80032b8:	bd10      	pop	{r4, pc}
 80032ba:	bf00      	nop
 80032bc:	2000011c 	.word	0x2000011c
 80032c0:	20000184 	.word	0x20000184
 80032c4:	200001ec 	.word	0x200001ec

080032c8 <global_stdio_init.part.0>:
 80032c8:	b510      	push	{r4, lr}
 80032ca:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <global_stdio_init.part.0+0x30>)
 80032cc:	4c0b      	ldr	r4, [pc, #44]	; (80032fc <global_stdio_init.part.0+0x34>)
 80032ce:	4a0c      	ldr	r2, [pc, #48]	; (8003300 <global_stdio_init.part.0+0x38>)
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	4620      	mov	r0, r4
 80032d4:	2200      	movs	r2, #0
 80032d6:	2104      	movs	r1, #4
 80032d8:	f7ff ff94 	bl	8003204 <std>
 80032dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80032e0:	2201      	movs	r2, #1
 80032e2:	2109      	movs	r1, #9
 80032e4:	f7ff ff8e 	bl	8003204 <std>
 80032e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80032ec:	2202      	movs	r2, #2
 80032ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032f2:	2112      	movs	r1, #18
 80032f4:	f7ff bf86 	b.w	8003204 <std>
 80032f8:	20000254 	.word	0x20000254
 80032fc:	2000011c 	.word	0x2000011c
 8003300:	08003271 	.word	0x08003271

08003304 <__sfp_lock_acquire>:
 8003304:	4801      	ldr	r0, [pc, #4]	; (800330c <__sfp_lock_acquire+0x8>)
 8003306:	f000 b9fe 	b.w	8003706 <__retarget_lock_acquire_recursive>
 800330a:	bf00      	nop
 800330c:	2000025d 	.word	0x2000025d

08003310 <__sfp_lock_release>:
 8003310:	4801      	ldr	r0, [pc, #4]	; (8003318 <__sfp_lock_release+0x8>)
 8003312:	f000 b9f9 	b.w	8003708 <__retarget_lock_release_recursive>
 8003316:	bf00      	nop
 8003318:	2000025d 	.word	0x2000025d

0800331c <__sinit>:
 800331c:	b510      	push	{r4, lr}
 800331e:	4604      	mov	r4, r0
 8003320:	f7ff fff0 	bl	8003304 <__sfp_lock_acquire>
 8003324:	6a23      	ldr	r3, [r4, #32]
 8003326:	b11b      	cbz	r3, 8003330 <__sinit+0x14>
 8003328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800332c:	f7ff bff0 	b.w	8003310 <__sfp_lock_release>
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <__sinit+0x28>)
 8003332:	6223      	str	r3, [r4, #32]
 8003334:	4b04      	ldr	r3, [pc, #16]	; (8003348 <__sinit+0x2c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f5      	bne.n	8003328 <__sinit+0xc>
 800333c:	f7ff ffc4 	bl	80032c8 <global_stdio_init.part.0>
 8003340:	e7f2      	b.n	8003328 <__sinit+0xc>
 8003342:	bf00      	nop
 8003344:	08003289 	.word	0x08003289
 8003348:	20000254 	.word	0x20000254

0800334c <_fwalk_sglue>:
 800334c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003350:	4607      	mov	r7, r0
 8003352:	4688      	mov	r8, r1
 8003354:	4614      	mov	r4, r2
 8003356:	2600      	movs	r6, #0
 8003358:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800335c:	f1b9 0901 	subs.w	r9, r9, #1
 8003360:	d505      	bpl.n	800336e <_fwalk_sglue+0x22>
 8003362:	6824      	ldr	r4, [r4, #0]
 8003364:	2c00      	cmp	r4, #0
 8003366:	d1f7      	bne.n	8003358 <_fwalk_sglue+0xc>
 8003368:	4630      	mov	r0, r6
 800336a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800336e:	89ab      	ldrh	r3, [r5, #12]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d907      	bls.n	8003384 <_fwalk_sglue+0x38>
 8003374:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003378:	3301      	adds	r3, #1
 800337a:	d003      	beq.n	8003384 <_fwalk_sglue+0x38>
 800337c:	4629      	mov	r1, r5
 800337e:	4638      	mov	r0, r7
 8003380:	47c0      	blx	r8
 8003382:	4306      	orrs	r6, r0
 8003384:	3568      	adds	r5, #104	; 0x68
 8003386:	e7e9      	b.n	800335c <_fwalk_sglue+0x10>

08003388 <iprintf>:
 8003388:	b40f      	push	{r0, r1, r2, r3}
 800338a:	b507      	push	{r0, r1, r2, lr}
 800338c:	4906      	ldr	r1, [pc, #24]	; (80033a8 <iprintf+0x20>)
 800338e:	ab04      	add	r3, sp, #16
 8003390:	6808      	ldr	r0, [r1, #0]
 8003392:	f853 2b04 	ldr.w	r2, [r3], #4
 8003396:	6881      	ldr	r1, [r0, #8]
 8003398:	9301      	str	r3, [sp, #4]
 800339a:	f000 fad9 	bl	8003950 <_vfiprintf_r>
 800339e:	b003      	add	sp, #12
 80033a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80033a4:	b004      	add	sp, #16
 80033a6:	4770      	bx	lr
 80033a8:	20000064 	.word	0x20000064

080033ac <_puts_r>:
 80033ac:	6a03      	ldr	r3, [r0, #32]
 80033ae:	b570      	push	{r4, r5, r6, lr}
 80033b0:	6884      	ldr	r4, [r0, #8]
 80033b2:	4605      	mov	r5, r0
 80033b4:	460e      	mov	r6, r1
 80033b6:	b90b      	cbnz	r3, 80033bc <_puts_r+0x10>
 80033b8:	f7ff ffb0 	bl	800331c <__sinit>
 80033bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033be:	07db      	lsls	r3, r3, #31
 80033c0:	d405      	bmi.n	80033ce <_puts_r+0x22>
 80033c2:	89a3      	ldrh	r3, [r4, #12]
 80033c4:	0598      	lsls	r0, r3, #22
 80033c6:	d402      	bmi.n	80033ce <_puts_r+0x22>
 80033c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033ca:	f000 f99c 	bl	8003706 <__retarget_lock_acquire_recursive>
 80033ce:	89a3      	ldrh	r3, [r4, #12]
 80033d0:	0719      	lsls	r1, r3, #28
 80033d2:	d513      	bpl.n	80033fc <_puts_r+0x50>
 80033d4:	6923      	ldr	r3, [r4, #16]
 80033d6:	b18b      	cbz	r3, 80033fc <_puts_r+0x50>
 80033d8:	3e01      	subs	r6, #1
 80033da:	68a3      	ldr	r3, [r4, #8]
 80033dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80033e0:	3b01      	subs	r3, #1
 80033e2:	60a3      	str	r3, [r4, #8]
 80033e4:	b9e9      	cbnz	r1, 8003422 <_puts_r+0x76>
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	da2e      	bge.n	8003448 <_puts_r+0x9c>
 80033ea:	4622      	mov	r2, r4
 80033ec:	210a      	movs	r1, #10
 80033ee:	4628      	mov	r0, r5
 80033f0:	f000 f87b 	bl	80034ea <__swbuf_r>
 80033f4:	3001      	adds	r0, #1
 80033f6:	d007      	beq.n	8003408 <_puts_r+0x5c>
 80033f8:	250a      	movs	r5, #10
 80033fa:	e007      	b.n	800340c <_puts_r+0x60>
 80033fc:	4621      	mov	r1, r4
 80033fe:	4628      	mov	r0, r5
 8003400:	f000 f8b0 	bl	8003564 <__swsetup_r>
 8003404:	2800      	cmp	r0, #0
 8003406:	d0e7      	beq.n	80033d8 <_puts_r+0x2c>
 8003408:	f04f 35ff 	mov.w	r5, #4294967295
 800340c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800340e:	07da      	lsls	r2, r3, #31
 8003410:	d405      	bmi.n	800341e <_puts_r+0x72>
 8003412:	89a3      	ldrh	r3, [r4, #12]
 8003414:	059b      	lsls	r3, r3, #22
 8003416:	d402      	bmi.n	800341e <_puts_r+0x72>
 8003418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800341a:	f000 f975 	bl	8003708 <__retarget_lock_release_recursive>
 800341e:	4628      	mov	r0, r5
 8003420:	bd70      	pop	{r4, r5, r6, pc}
 8003422:	2b00      	cmp	r3, #0
 8003424:	da04      	bge.n	8003430 <_puts_r+0x84>
 8003426:	69a2      	ldr	r2, [r4, #24]
 8003428:	429a      	cmp	r2, r3
 800342a:	dc06      	bgt.n	800343a <_puts_r+0x8e>
 800342c:	290a      	cmp	r1, #10
 800342e:	d004      	beq.n	800343a <_puts_r+0x8e>
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	6022      	str	r2, [r4, #0]
 8003436:	7019      	strb	r1, [r3, #0]
 8003438:	e7cf      	b.n	80033da <_puts_r+0x2e>
 800343a:	4622      	mov	r2, r4
 800343c:	4628      	mov	r0, r5
 800343e:	f000 f854 	bl	80034ea <__swbuf_r>
 8003442:	3001      	adds	r0, #1
 8003444:	d1c9      	bne.n	80033da <_puts_r+0x2e>
 8003446:	e7df      	b.n	8003408 <_puts_r+0x5c>
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	250a      	movs	r5, #10
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	6022      	str	r2, [r4, #0]
 8003450:	701d      	strb	r5, [r3, #0]
 8003452:	e7db      	b.n	800340c <_puts_r+0x60>

08003454 <puts>:
 8003454:	4b02      	ldr	r3, [pc, #8]	; (8003460 <puts+0xc>)
 8003456:	4601      	mov	r1, r0
 8003458:	6818      	ldr	r0, [r3, #0]
 800345a:	f7ff bfa7 	b.w	80033ac <_puts_r>
 800345e:	bf00      	nop
 8003460:	20000064 	.word	0x20000064

08003464 <__sread>:
 8003464:	b510      	push	{r4, lr}
 8003466:	460c      	mov	r4, r1
 8003468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800346c:	f000 f8fc 	bl	8003668 <_read_r>
 8003470:	2800      	cmp	r0, #0
 8003472:	bfab      	itete	ge
 8003474:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003476:	89a3      	ldrhlt	r3, [r4, #12]
 8003478:	181b      	addge	r3, r3, r0
 800347a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800347e:	bfac      	ite	ge
 8003480:	6563      	strge	r3, [r4, #84]	; 0x54
 8003482:	81a3      	strhlt	r3, [r4, #12]
 8003484:	bd10      	pop	{r4, pc}

08003486 <__swrite>:
 8003486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800348a:	461f      	mov	r7, r3
 800348c:	898b      	ldrh	r3, [r1, #12]
 800348e:	05db      	lsls	r3, r3, #23
 8003490:	4605      	mov	r5, r0
 8003492:	460c      	mov	r4, r1
 8003494:	4616      	mov	r6, r2
 8003496:	d505      	bpl.n	80034a4 <__swrite+0x1e>
 8003498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800349c:	2302      	movs	r3, #2
 800349e:	2200      	movs	r2, #0
 80034a0:	f000 f8d0 	bl	8003644 <_lseek_r>
 80034a4:	89a3      	ldrh	r3, [r4, #12]
 80034a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034ae:	81a3      	strh	r3, [r4, #12]
 80034b0:	4632      	mov	r2, r6
 80034b2:	463b      	mov	r3, r7
 80034b4:	4628      	mov	r0, r5
 80034b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034ba:	f000 b8e7 	b.w	800368c <_write_r>

080034be <__sseek>:
 80034be:	b510      	push	{r4, lr}
 80034c0:	460c      	mov	r4, r1
 80034c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034c6:	f000 f8bd 	bl	8003644 <_lseek_r>
 80034ca:	1c43      	adds	r3, r0, #1
 80034cc:	89a3      	ldrh	r3, [r4, #12]
 80034ce:	bf15      	itete	ne
 80034d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80034d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80034d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80034da:	81a3      	strheq	r3, [r4, #12]
 80034dc:	bf18      	it	ne
 80034de:	81a3      	strhne	r3, [r4, #12]
 80034e0:	bd10      	pop	{r4, pc}

080034e2 <__sclose>:
 80034e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034e6:	f000 b89d 	b.w	8003624 <_close_r>

080034ea <__swbuf_r>:
 80034ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ec:	460e      	mov	r6, r1
 80034ee:	4614      	mov	r4, r2
 80034f0:	4605      	mov	r5, r0
 80034f2:	b118      	cbz	r0, 80034fc <__swbuf_r+0x12>
 80034f4:	6a03      	ldr	r3, [r0, #32]
 80034f6:	b90b      	cbnz	r3, 80034fc <__swbuf_r+0x12>
 80034f8:	f7ff ff10 	bl	800331c <__sinit>
 80034fc:	69a3      	ldr	r3, [r4, #24]
 80034fe:	60a3      	str	r3, [r4, #8]
 8003500:	89a3      	ldrh	r3, [r4, #12]
 8003502:	071a      	lsls	r2, r3, #28
 8003504:	d525      	bpl.n	8003552 <__swbuf_r+0x68>
 8003506:	6923      	ldr	r3, [r4, #16]
 8003508:	b31b      	cbz	r3, 8003552 <__swbuf_r+0x68>
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	6922      	ldr	r2, [r4, #16]
 800350e:	1a98      	subs	r0, r3, r2
 8003510:	6963      	ldr	r3, [r4, #20]
 8003512:	b2f6      	uxtb	r6, r6
 8003514:	4283      	cmp	r3, r0
 8003516:	4637      	mov	r7, r6
 8003518:	dc04      	bgt.n	8003524 <__swbuf_r+0x3a>
 800351a:	4621      	mov	r1, r4
 800351c:	4628      	mov	r0, r5
 800351e:	f000 fd47 	bl	8003fb0 <_fflush_r>
 8003522:	b9e0      	cbnz	r0, 800355e <__swbuf_r+0x74>
 8003524:	68a3      	ldr	r3, [r4, #8]
 8003526:	3b01      	subs	r3, #1
 8003528:	60a3      	str	r3, [r4, #8]
 800352a:	6823      	ldr	r3, [r4, #0]
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	6022      	str	r2, [r4, #0]
 8003530:	701e      	strb	r6, [r3, #0]
 8003532:	6962      	ldr	r2, [r4, #20]
 8003534:	1c43      	adds	r3, r0, #1
 8003536:	429a      	cmp	r2, r3
 8003538:	d004      	beq.n	8003544 <__swbuf_r+0x5a>
 800353a:	89a3      	ldrh	r3, [r4, #12]
 800353c:	07db      	lsls	r3, r3, #31
 800353e:	d506      	bpl.n	800354e <__swbuf_r+0x64>
 8003540:	2e0a      	cmp	r6, #10
 8003542:	d104      	bne.n	800354e <__swbuf_r+0x64>
 8003544:	4621      	mov	r1, r4
 8003546:	4628      	mov	r0, r5
 8003548:	f000 fd32 	bl	8003fb0 <_fflush_r>
 800354c:	b938      	cbnz	r0, 800355e <__swbuf_r+0x74>
 800354e:	4638      	mov	r0, r7
 8003550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003552:	4621      	mov	r1, r4
 8003554:	4628      	mov	r0, r5
 8003556:	f000 f805 	bl	8003564 <__swsetup_r>
 800355a:	2800      	cmp	r0, #0
 800355c:	d0d5      	beq.n	800350a <__swbuf_r+0x20>
 800355e:	f04f 37ff 	mov.w	r7, #4294967295
 8003562:	e7f4      	b.n	800354e <__swbuf_r+0x64>

08003564 <__swsetup_r>:
 8003564:	b538      	push	{r3, r4, r5, lr}
 8003566:	4b2a      	ldr	r3, [pc, #168]	; (8003610 <__swsetup_r+0xac>)
 8003568:	4605      	mov	r5, r0
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	460c      	mov	r4, r1
 800356e:	b118      	cbz	r0, 8003578 <__swsetup_r+0x14>
 8003570:	6a03      	ldr	r3, [r0, #32]
 8003572:	b90b      	cbnz	r3, 8003578 <__swsetup_r+0x14>
 8003574:	f7ff fed2 	bl	800331c <__sinit>
 8003578:	89a3      	ldrh	r3, [r4, #12]
 800357a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800357e:	0718      	lsls	r0, r3, #28
 8003580:	d422      	bmi.n	80035c8 <__swsetup_r+0x64>
 8003582:	06d9      	lsls	r1, r3, #27
 8003584:	d407      	bmi.n	8003596 <__swsetup_r+0x32>
 8003586:	2309      	movs	r3, #9
 8003588:	602b      	str	r3, [r5, #0]
 800358a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800358e:	81a3      	strh	r3, [r4, #12]
 8003590:	f04f 30ff 	mov.w	r0, #4294967295
 8003594:	e034      	b.n	8003600 <__swsetup_r+0x9c>
 8003596:	0758      	lsls	r0, r3, #29
 8003598:	d512      	bpl.n	80035c0 <__swsetup_r+0x5c>
 800359a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800359c:	b141      	cbz	r1, 80035b0 <__swsetup_r+0x4c>
 800359e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035a2:	4299      	cmp	r1, r3
 80035a4:	d002      	beq.n	80035ac <__swsetup_r+0x48>
 80035a6:	4628      	mov	r0, r5
 80035a8:	f000 f8b0 	bl	800370c <_free_r>
 80035ac:	2300      	movs	r3, #0
 80035ae:	6363      	str	r3, [r4, #52]	; 0x34
 80035b0:	89a3      	ldrh	r3, [r4, #12]
 80035b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80035b6:	81a3      	strh	r3, [r4, #12]
 80035b8:	2300      	movs	r3, #0
 80035ba:	6063      	str	r3, [r4, #4]
 80035bc:	6923      	ldr	r3, [r4, #16]
 80035be:	6023      	str	r3, [r4, #0]
 80035c0:	89a3      	ldrh	r3, [r4, #12]
 80035c2:	f043 0308 	orr.w	r3, r3, #8
 80035c6:	81a3      	strh	r3, [r4, #12]
 80035c8:	6923      	ldr	r3, [r4, #16]
 80035ca:	b94b      	cbnz	r3, 80035e0 <__swsetup_r+0x7c>
 80035cc:	89a3      	ldrh	r3, [r4, #12]
 80035ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80035d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d6:	d003      	beq.n	80035e0 <__swsetup_r+0x7c>
 80035d8:	4621      	mov	r1, r4
 80035da:	4628      	mov	r0, r5
 80035dc:	f000 fd36 	bl	800404c <__smakebuf_r>
 80035e0:	89a0      	ldrh	r0, [r4, #12]
 80035e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035e6:	f010 0301 	ands.w	r3, r0, #1
 80035ea:	d00a      	beq.n	8003602 <__swsetup_r+0x9e>
 80035ec:	2300      	movs	r3, #0
 80035ee:	60a3      	str	r3, [r4, #8]
 80035f0:	6963      	ldr	r3, [r4, #20]
 80035f2:	425b      	negs	r3, r3
 80035f4:	61a3      	str	r3, [r4, #24]
 80035f6:	6923      	ldr	r3, [r4, #16]
 80035f8:	b943      	cbnz	r3, 800360c <__swsetup_r+0xa8>
 80035fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80035fe:	d1c4      	bne.n	800358a <__swsetup_r+0x26>
 8003600:	bd38      	pop	{r3, r4, r5, pc}
 8003602:	0781      	lsls	r1, r0, #30
 8003604:	bf58      	it	pl
 8003606:	6963      	ldrpl	r3, [r4, #20]
 8003608:	60a3      	str	r3, [r4, #8]
 800360a:	e7f4      	b.n	80035f6 <__swsetup_r+0x92>
 800360c:	2000      	movs	r0, #0
 800360e:	e7f7      	b.n	8003600 <__swsetup_r+0x9c>
 8003610:	20000064 	.word	0x20000064

08003614 <memset>:
 8003614:	4402      	add	r2, r0
 8003616:	4603      	mov	r3, r0
 8003618:	4293      	cmp	r3, r2
 800361a:	d100      	bne.n	800361e <memset+0xa>
 800361c:	4770      	bx	lr
 800361e:	f803 1b01 	strb.w	r1, [r3], #1
 8003622:	e7f9      	b.n	8003618 <memset+0x4>

08003624 <_close_r>:
 8003624:	b538      	push	{r3, r4, r5, lr}
 8003626:	4d06      	ldr	r5, [pc, #24]	; (8003640 <_close_r+0x1c>)
 8003628:	2300      	movs	r3, #0
 800362a:	4604      	mov	r4, r0
 800362c:	4608      	mov	r0, r1
 800362e:	602b      	str	r3, [r5, #0]
 8003630:	f7fd fc0f 	bl	8000e52 <_close>
 8003634:	1c43      	adds	r3, r0, #1
 8003636:	d102      	bne.n	800363e <_close_r+0x1a>
 8003638:	682b      	ldr	r3, [r5, #0]
 800363a:	b103      	cbz	r3, 800363e <_close_r+0x1a>
 800363c:	6023      	str	r3, [r4, #0]
 800363e:	bd38      	pop	{r3, r4, r5, pc}
 8003640:	20000258 	.word	0x20000258

08003644 <_lseek_r>:
 8003644:	b538      	push	{r3, r4, r5, lr}
 8003646:	4d07      	ldr	r5, [pc, #28]	; (8003664 <_lseek_r+0x20>)
 8003648:	4604      	mov	r4, r0
 800364a:	4608      	mov	r0, r1
 800364c:	4611      	mov	r1, r2
 800364e:	2200      	movs	r2, #0
 8003650:	602a      	str	r2, [r5, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	f7fd fc24 	bl	8000ea0 <_lseek>
 8003658:	1c43      	adds	r3, r0, #1
 800365a:	d102      	bne.n	8003662 <_lseek_r+0x1e>
 800365c:	682b      	ldr	r3, [r5, #0]
 800365e:	b103      	cbz	r3, 8003662 <_lseek_r+0x1e>
 8003660:	6023      	str	r3, [r4, #0]
 8003662:	bd38      	pop	{r3, r4, r5, pc}
 8003664:	20000258 	.word	0x20000258

08003668 <_read_r>:
 8003668:	b538      	push	{r3, r4, r5, lr}
 800366a:	4d07      	ldr	r5, [pc, #28]	; (8003688 <_read_r+0x20>)
 800366c:	4604      	mov	r4, r0
 800366e:	4608      	mov	r0, r1
 8003670:	4611      	mov	r1, r2
 8003672:	2200      	movs	r2, #0
 8003674:	602a      	str	r2, [r5, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	f7fd fbb2 	bl	8000de0 <_read>
 800367c:	1c43      	adds	r3, r0, #1
 800367e:	d102      	bne.n	8003686 <_read_r+0x1e>
 8003680:	682b      	ldr	r3, [r5, #0]
 8003682:	b103      	cbz	r3, 8003686 <_read_r+0x1e>
 8003684:	6023      	str	r3, [r4, #0]
 8003686:	bd38      	pop	{r3, r4, r5, pc}
 8003688:	20000258 	.word	0x20000258

0800368c <_write_r>:
 800368c:	b538      	push	{r3, r4, r5, lr}
 800368e:	4d07      	ldr	r5, [pc, #28]	; (80036ac <_write_r+0x20>)
 8003690:	4604      	mov	r4, r0
 8003692:	4608      	mov	r0, r1
 8003694:	4611      	mov	r1, r2
 8003696:	2200      	movs	r2, #0
 8003698:	602a      	str	r2, [r5, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	f7fd fbbd 	bl	8000e1a <_write>
 80036a0:	1c43      	adds	r3, r0, #1
 80036a2:	d102      	bne.n	80036aa <_write_r+0x1e>
 80036a4:	682b      	ldr	r3, [r5, #0]
 80036a6:	b103      	cbz	r3, 80036aa <_write_r+0x1e>
 80036a8:	6023      	str	r3, [r4, #0]
 80036aa:	bd38      	pop	{r3, r4, r5, pc}
 80036ac:	20000258 	.word	0x20000258

080036b0 <__errno>:
 80036b0:	4b01      	ldr	r3, [pc, #4]	; (80036b8 <__errno+0x8>)
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000064 	.word	0x20000064

080036bc <__libc_init_array>:
 80036bc:	b570      	push	{r4, r5, r6, lr}
 80036be:	4d0d      	ldr	r5, [pc, #52]	; (80036f4 <__libc_init_array+0x38>)
 80036c0:	4c0d      	ldr	r4, [pc, #52]	; (80036f8 <__libc_init_array+0x3c>)
 80036c2:	1b64      	subs	r4, r4, r5
 80036c4:	10a4      	asrs	r4, r4, #2
 80036c6:	2600      	movs	r6, #0
 80036c8:	42a6      	cmp	r6, r4
 80036ca:	d109      	bne.n	80036e0 <__libc_init_array+0x24>
 80036cc:	4d0b      	ldr	r5, [pc, #44]	; (80036fc <__libc_init_array+0x40>)
 80036ce:	4c0c      	ldr	r4, [pc, #48]	; (8003700 <__libc_init_array+0x44>)
 80036d0:	f000 fd2a 	bl	8004128 <_init>
 80036d4:	1b64      	subs	r4, r4, r5
 80036d6:	10a4      	asrs	r4, r4, #2
 80036d8:	2600      	movs	r6, #0
 80036da:	42a6      	cmp	r6, r4
 80036dc:	d105      	bne.n	80036ea <__libc_init_array+0x2e>
 80036de:	bd70      	pop	{r4, r5, r6, pc}
 80036e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e4:	4798      	blx	r3
 80036e6:	3601      	adds	r6, #1
 80036e8:	e7ee      	b.n	80036c8 <__libc_init_array+0xc>
 80036ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ee:	4798      	blx	r3
 80036f0:	3601      	adds	r6, #1
 80036f2:	e7f2      	b.n	80036da <__libc_init_array+0x1e>
 80036f4:	0800421c 	.word	0x0800421c
 80036f8:	0800421c 	.word	0x0800421c
 80036fc:	0800421c 	.word	0x0800421c
 8003700:	08004220 	.word	0x08004220

08003704 <__retarget_lock_init_recursive>:
 8003704:	4770      	bx	lr

08003706 <__retarget_lock_acquire_recursive>:
 8003706:	4770      	bx	lr

08003708 <__retarget_lock_release_recursive>:
 8003708:	4770      	bx	lr
	...

0800370c <_free_r>:
 800370c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800370e:	2900      	cmp	r1, #0
 8003710:	d044      	beq.n	800379c <_free_r+0x90>
 8003712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003716:	9001      	str	r0, [sp, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f1a1 0404 	sub.w	r4, r1, #4
 800371e:	bfb8      	it	lt
 8003720:	18e4      	addlt	r4, r4, r3
 8003722:	f000 f8df 	bl	80038e4 <__malloc_lock>
 8003726:	4a1e      	ldr	r2, [pc, #120]	; (80037a0 <_free_r+0x94>)
 8003728:	9801      	ldr	r0, [sp, #4]
 800372a:	6813      	ldr	r3, [r2, #0]
 800372c:	b933      	cbnz	r3, 800373c <_free_r+0x30>
 800372e:	6063      	str	r3, [r4, #4]
 8003730:	6014      	str	r4, [r2, #0]
 8003732:	b003      	add	sp, #12
 8003734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003738:	f000 b8da 	b.w	80038f0 <__malloc_unlock>
 800373c:	42a3      	cmp	r3, r4
 800373e:	d908      	bls.n	8003752 <_free_r+0x46>
 8003740:	6825      	ldr	r5, [r4, #0]
 8003742:	1961      	adds	r1, r4, r5
 8003744:	428b      	cmp	r3, r1
 8003746:	bf01      	itttt	eq
 8003748:	6819      	ldreq	r1, [r3, #0]
 800374a:	685b      	ldreq	r3, [r3, #4]
 800374c:	1949      	addeq	r1, r1, r5
 800374e:	6021      	streq	r1, [r4, #0]
 8003750:	e7ed      	b.n	800372e <_free_r+0x22>
 8003752:	461a      	mov	r2, r3
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	b10b      	cbz	r3, 800375c <_free_r+0x50>
 8003758:	42a3      	cmp	r3, r4
 800375a:	d9fa      	bls.n	8003752 <_free_r+0x46>
 800375c:	6811      	ldr	r1, [r2, #0]
 800375e:	1855      	adds	r5, r2, r1
 8003760:	42a5      	cmp	r5, r4
 8003762:	d10b      	bne.n	800377c <_free_r+0x70>
 8003764:	6824      	ldr	r4, [r4, #0]
 8003766:	4421      	add	r1, r4
 8003768:	1854      	adds	r4, r2, r1
 800376a:	42a3      	cmp	r3, r4
 800376c:	6011      	str	r1, [r2, #0]
 800376e:	d1e0      	bne.n	8003732 <_free_r+0x26>
 8003770:	681c      	ldr	r4, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	6053      	str	r3, [r2, #4]
 8003776:	440c      	add	r4, r1
 8003778:	6014      	str	r4, [r2, #0]
 800377a:	e7da      	b.n	8003732 <_free_r+0x26>
 800377c:	d902      	bls.n	8003784 <_free_r+0x78>
 800377e:	230c      	movs	r3, #12
 8003780:	6003      	str	r3, [r0, #0]
 8003782:	e7d6      	b.n	8003732 <_free_r+0x26>
 8003784:	6825      	ldr	r5, [r4, #0]
 8003786:	1961      	adds	r1, r4, r5
 8003788:	428b      	cmp	r3, r1
 800378a:	bf04      	itt	eq
 800378c:	6819      	ldreq	r1, [r3, #0]
 800378e:	685b      	ldreq	r3, [r3, #4]
 8003790:	6063      	str	r3, [r4, #4]
 8003792:	bf04      	itt	eq
 8003794:	1949      	addeq	r1, r1, r5
 8003796:	6021      	streq	r1, [r4, #0]
 8003798:	6054      	str	r4, [r2, #4]
 800379a:	e7ca      	b.n	8003732 <_free_r+0x26>
 800379c:	b003      	add	sp, #12
 800379e:	bd30      	pop	{r4, r5, pc}
 80037a0:	20000260 	.word	0x20000260

080037a4 <sbrk_aligned>:
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	4e0e      	ldr	r6, [pc, #56]	; (80037e0 <sbrk_aligned+0x3c>)
 80037a8:	460c      	mov	r4, r1
 80037aa:	6831      	ldr	r1, [r6, #0]
 80037ac:	4605      	mov	r5, r0
 80037ae:	b911      	cbnz	r1, 80037b6 <sbrk_aligned+0x12>
 80037b0:	f000 fcaa 	bl	8004108 <_sbrk_r>
 80037b4:	6030      	str	r0, [r6, #0]
 80037b6:	4621      	mov	r1, r4
 80037b8:	4628      	mov	r0, r5
 80037ba:	f000 fca5 	bl	8004108 <_sbrk_r>
 80037be:	1c43      	adds	r3, r0, #1
 80037c0:	d00a      	beq.n	80037d8 <sbrk_aligned+0x34>
 80037c2:	1cc4      	adds	r4, r0, #3
 80037c4:	f024 0403 	bic.w	r4, r4, #3
 80037c8:	42a0      	cmp	r0, r4
 80037ca:	d007      	beq.n	80037dc <sbrk_aligned+0x38>
 80037cc:	1a21      	subs	r1, r4, r0
 80037ce:	4628      	mov	r0, r5
 80037d0:	f000 fc9a 	bl	8004108 <_sbrk_r>
 80037d4:	3001      	adds	r0, #1
 80037d6:	d101      	bne.n	80037dc <sbrk_aligned+0x38>
 80037d8:	f04f 34ff 	mov.w	r4, #4294967295
 80037dc:	4620      	mov	r0, r4
 80037de:	bd70      	pop	{r4, r5, r6, pc}
 80037e0:	20000264 	.word	0x20000264

080037e4 <_malloc_r>:
 80037e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037e8:	1ccd      	adds	r5, r1, #3
 80037ea:	f025 0503 	bic.w	r5, r5, #3
 80037ee:	3508      	adds	r5, #8
 80037f0:	2d0c      	cmp	r5, #12
 80037f2:	bf38      	it	cc
 80037f4:	250c      	movcc	r5, #12
 80037f6:	2d00      	cmp	r5, #0
 80037f8:	4607      	mov	r7, r0
 80037fa:	db01      	blt.n	8003800 <_malloc_r+0x1c>
 80037fc:	42a9      	cmp	r1, r5
 80037fe:	d905      	bls.n	800380c <_malloc_r+0x28>
 8003800:	230c      	movs	r3, #12
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	2600      	movs	r6, #0
 8003806:	4630      	mov	r0, r6
 8003808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800380c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80038e0 <_malloc_r+0xfc>
 8003810:	f000 f868 	bl	80038e4 <__malloc_lock>
 8003814:	f8d8 3000 	ldr.w	r3, [r8]
 8003818:	461c      	mov	r4, r3
 800381a:	bb5c      	cbnz	r4, 8003874 <_malloc_r+0x90>
 800381c:	4629      	mov	r1, r5
 800381e:	4638      	mov	r0, r7
 8003820:	f7ff ffc0 	bl	80037a4 <sbrk_aligned>
 8003824:	1c43      	adds	r3, r0, #1
 8003826:	4604      	mov	r4, r0
 8003828:	d155      	bne.n	80038d6 <_malloc_r+0xf2>
 800382a:	f8d8 4000 	ldr.w	r4, [r8]
 800382e:	4626      	mov	r6, r4
 8003830:	2e00      	cmp	r6, #0
 8003832:	d145      	bne.n	80038c0 <_malloc_r+0xdc>
 8003834:	2c00      	cmp	r4, #0
 8003836:	d048      	beq.n	80038ca <_malloc_r+0xe6>
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	4631      	mov	r1, r6
 800383c:	4638      	mov	r0, r7
 800383e:	eb04 0903 	add.w	r9, r4, r3
 8003842:	f000 fc61 	bl	8004108 <_sbrk_r>
 8003846:	4581      	cmp	r9, r0
 8003848:	d13f      	bne.n	80038ca <_malloc_r+0xe6>
 800384a:	6821      	ldr	r1, [r4, #0]
 800384c:	1a6d      	subs	r5, r5, r1
 800384e:	4629      	mov	r1, r5
 8003850:	4638      	mov	r0, r7
 8003852:	f7ff ffa7 	bl	80037a4 <sbrk_aligned>
 8003856:	3001      	adds	r0, #1
 8003858:	d037      	beq.n	80038ca <_malloc_r+0xe6>
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	442b      	add	r3, r5
 800385e:	6023      	str	r3, [r4, #0]
 8003860:	f8d8 3000 	ldr.w	r3, [r8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d038      	beq.n	80038da <_malloc_r+0xf6>
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	42a2      	cmp	r2, r4
 800386c:	d12b      	bne.n	80038c6 <_malloc_r+0xe2>
 800386e:	2200      	movs	r2, #0
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	e00f      	b.n	8003894 <_malloc_r+0xb0>
 8003874:	6822      	ldr	r2, [r4, #0]
 8003876:	1b52      	subs	r2, r2, r5
 8003878:	d41f      	bmi.n	80038ba <_malloc_r+0xd6>
 800387a:	2a0b      	cmp	r2, #11
 800387c:	d917      	bls.n	80038ae <_malloc_r+0xca>
 800387e:	1961      	adds	r1, r4, r5
 8003880:	42a3      	cmp	r3, r4
 8003882:	6025      	str	r5, [r4, #0]
 8003884:	bf18      	it	ne
 8003886:	6059      	strne	r1, [r3, #4]
 8003888:	6863      	ldr	r3, [r4, #4]
 800388a:	bf08      	it	eq
 800388c:	f8c8 1000 	streq.w	r1, [r8]
 8003890:	5162      	str	r2, [r4, r5]
 8003892:	604b      	str	r3, [r1, #4]
 8003894:	4638      	mov	r0, r7
 8003896:	f104 060b 	add.w	r6, r4, #11
 800389a:	f000 f829 	bl	80038f0 <__malloc_unlock>
 800389e:	f026 0607 	bic.w	r6, r6, #7
 80038a2:	1d23      	adds	r3, r4, #4
 80038a4:	1af2      	subs	r2, r6, r3
 80038a6:	d0ae      	beq.n	8003806 <_malloc_r+0x22>
 80038a8:	1b9b      	subs	r3, r3, r6
 80038aa:	50a3      	str	r3, [r4, r2]
 80038ac:	e7ab      	b.n	8003806 <_malloc_r+0x22>
 80038ae:	42a3      	cmp	r3, r4
 80038b0:	6862      	ldr	r2, [r4, #4]
 80038b2:	d1dd      	bne.n	8003870 <_malloc_r+0x8c>
 80038b4:	f8c8 2000 	str.w	r2, [r8]
 80038b8:	e7ec      	b.n	8003894 <_malloc_r+0xb0>
 80038ba:	4623      	mov	r3, r4
 80038bc:	6864      	ldr	r4, [r4, #4]
 80038be:	e7ac      	b.n	800381a <_malloc_r+0x36>
 80038c0:	4634      	mov	r4, r6
 80038c2:	6876      	ldr	r6, [r6, #4]
 80038c4:	e7b4      	b.n	8003830 <_malloc_r+0x4c>
 80038c6:	4613      	mov	r3, r2
 80038c8:	e7cc      	b.n	8003864 <_malloc_r+0x80>
 80038ca:	230c      	movs	r3, #12
 80038cc:	603b      	str	r3, [r7, #0]
 80038ce:	4638      	mov	r0, r7
 80038d0:	f000 f80e 	bl	80038f0 <__malloc_unlock>
 80038d4:	e797      	b.n	8003806 <_malloc_r+0x22>
 80038d6:	6025      	str	r5, [r4, #0]
 80038d8:	e7dc      	b.n	8003894 <_malloc_r+0xb0>
 80038da:	605b      	str	r3, [r3, #4]
 80038dc:	deff      	udf	#255	; 0xff
 80038de:	bf00      	nop
 80038e0:	20000260 	.word	0x20000260

080038e4 <__malloc_lock>:
 80038e4:	4801      	ldr	r0, [pc, #4]	; (80038ec <__malloc_lock+0x8>)
 80038e6:	f7ff bf0e 	b.w	8003706 <__retarget_lock_acquire_recursive>
 80038ea:	bf00      	nop
 80038ec:	2000025c 	.word	0x2000025c

080038f0 <__malloc_unlock>:
 80038f0:	4801      	ldr	r0, [pc, #4]	; (80038f8 <__malloc_unlock+0x8>)
 80038f2:	f7ff bf09 	b.w	8003708 <__retarget_lock_release_recursive>
 80038f6:	bf00      	nop
 80038f8:	2000025c 	.word	0x2000025c

080038fc <__sfputc_r>:
 80038fc:	6893      	ldr	r3, [r2, #8]
 80038fe:	3b01      	subs	r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	b410      	push	{r4}
 8003904:	6093      	str	r3, [r2, #8]
 8003906:	da08      	bge.n	800391a <__sfputc_r+0x1e>
 8003908:	6994      	ldr	r4, [r2, #24]
 800390a:	42a3      	cmp	r3, r4
 800390c:	db01      	blt.n	8003912 <__sfputc_r+0x16>
 800390e:	290a      	cmp	r1, #10
 8003910:	d103      	bne.n	800391a <__sfputc_r+0x1e>
 8003912:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003916:	f7ff bde8 	b.w	80034ea <__swbuf_r>
 800391a:	6813      	ldr	r3, [r2, #0]
 800391c:	1c58      	adds	r0, r3, #1
 800391e:	6010      	str	r0, [r2, #0]
 8003920:	7019      	strb	r1, [r3, #0]
 8003922:	4608      	mov	r0, r1
 8003924:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003928:	4770      	bx	lr

0800392a <__sfputs_r>:
 800392a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392c:	4606      	mov	r6, r0
 800392e:	460f      	mov	r7, r1
 8003930:	4614      	mov	r4, r2
 8003932:	18d5      	adds	r5, r2, r3
 8003934:	42ac      	cmp	r4, r5
 8003936:	d101      	bne.n	800393c <__sfputs_r+0x12>
 8003938:	2000      	movs	r0, #0
 800393a:	e007      	b.n	800394c <__sfputs_r+0x22>
 800393c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003940:	463a      	mov	r2, r7
 8003942:	4630      	mov	r0, r6
 8003944:	f7ff ffda 	bl	80038fc <__sfputc_r>
 8003948:	1c43      	adds	r3, r0, #1
 800394a:	d1f3      	bne.n	8003934 <__sfputs_r+0xa>
 800394c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003950 <_vfiprintf_r>:
 8003950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003954:	460d      	mov	r5, r1
 8003956:	b09d      	sub	sp, #116	; 0x74
 8003958:	4614      	mov	r4, r2
 800395a:	4698      	mov	r8, r3
 800395c:	4606      	mov	r6, r0
 800395e:	b118      	cbz	r0, 8003968 <_vfiprintf_r+0x18>
 8003960:	6a03      	ldr	r3, [r0, #32]
 8003962:	b90b      	cbnz	r3, 8003968 <_vfiprintf_r+0x18>
 8003964:	f7ff fcda 	bl	800331c <__sinit>
 8003968:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800396a:	07d9      	lsls	r1, r3, #31
 800396c:	d405      	bmi.n	800397a <_vfiprintf_r+0x2a>
 800396e:	89ab      	ldrh	r3, [r5, #12]
 8003970:	059a      	lsls	r2, r3, #22
 8003972:	d402      	bmi.n	800397a <_vfiprintf_r+0x2a>
 8003974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003976:	f7ff fec6 	bl	8003706 <__retarget_lock_acquire_recursive>
 800397a:	89ab      	ldrh	r3, [r5, #12]
 800397c:	071b      	lsls	r3, r3, #28
 800397e:	d501      	bpl.n	8003984 <_vfiprintf_r+0x34>
 8003980:	692b      	ldr	r3, [r5, #16]
 8003982:	b99b      	cbnz	r3, 80039ac <_vfiprintf_r+0x5c>
 8003984:	4629      	mov	r1, r5
 8003986:	4630      	mov	r0, r6
 8003988:	f7ff fdec 	bl	8003564 <__swsetup_r>
 800398c:	b170      	cbz	r0, 80039ac <_vfiprintf_r+0x5c>
 800398e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003990:	07dc      	lsls	r4, r3, #31
 8003992:	d504      	bpl.n	800399e <_vfiprintf_r+0x4e>
 8003994:	f04f 30ff 	mov.w	r0, #4294967295
 8003998:	b01d      	add	sp, #116	; 0x74
 800399a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800399e:	89ab      	ldrh	r3, [r5, #12]
 80039a0:	0598      	lsls	r0, r3, #22
 80039a2:	d4f7      	bmi.n	8003994 <_vfiprintf_r+0x44>
 80039a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039a6:	f7ff feaf 	bl	8003708 <__retarget_lock_release_recursive>
 80039aa:	e7f3      	b.n	8003994 <_vfiprintf_r+0x44>
 80039ac:	2300      	movs	r3, #0
 80039ae:	9309      	str	r3, [sp, #36]	; 0x24
 80039b0:	2320      	movs	r3, #32
 80039b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80039ba:	2330      	movs	r3, #48	; 0x30
 80039bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003b70 <_vfiprintf_r+0x220>
 80039c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039c4:	f04f 0901 	mov.w	r9, #1
 80039c8:	4623      	mov	r3, r4
 80039ca:	469a      	mov	sl, r3
 80039cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039d0:	b10a      	cbz	r2, 80039d6 <_vfiprintf_r+0x86>
 80039d2:	2a25      	cmp	r2, #37	; 0x25
 80039d4:	d1f9      	bne.n	80039ca <_vfiprintf_r+0x7a>
 80039d6:	ebba 0b04 	subs.w	fp, sl, r4
 80039da:	d00b      	beq.n	80039f4 <_vfiprintf_r+0xa4>
 80039dc:	465b      	mov	r3, fp
 80039de:	4622      	mov	r2, r4
 80039e0:	4629      	mov	r1, r5
 80039e2:	4630      	mov	r0, r6
 80039e4:	f7ff ffa1 	bl	800392a <__sfputs_r>
 80039e8:	3001      	adds	r0, #1
 80039ea:	f000 80a9 	beq.w	8003b40 <_vfiprintf_r+0x1f0>
 80039ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039f0:	445a      	add	r2, fp
 80039f2:	9209      	str	r2, [sp, #36]	; 0x24
 80039f4:	f89a 3000 	ldrb.w	r3, [sl]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 80a1 	beq.w	8003b40 <_vfiprintf_r+0x1f0>
 80039fe:	2300      	movs	r3, #0
 8003a00:	f04f 32ff 	mov.w	r2, #4294967295
 8003a04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a08:	f10a 0a01 	add.w	sl, sl, #1
 8003a0c:	9304      	str	r3, [sp, #16]
 8003a0e:	9307      	str	r3, [sp, #28]
 8003a10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a14:	931a      	str	r3, [sp, #104]	; 0x68
 8003a16:	4654      	mov	r4, sl
 8003a18:	2205      	movs	r2, #5
 8003a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a1e:	4854      	ldr	r0, [pc, #336]	; (8003b70 <_vfiprintf_r+0x220>)
 8003a20:	f7fc fbd6 	bl	80001d0 <memchr>
 8003a24:	9a04      	ldr	r2, [sp, #16]
 8003a26:	b9d8      	cbnz	r0, 8003a60 <_vfiprintf_r+0x110>
 8003a28:	06d1      	lsls	r1, r2, #27
 8003a2a:	bf44      	itt	mi
 8003a2c:	2320      	movmi	r3, #32
 8003a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a32:	0713      	lsls	r3, r2, #28
 8003a34:	bf44      	itt	mi
 8003a36:	232b      	movmi	r3, #43	; 0x2b
 8003a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8003a40:	2b2a      	cmp	r3, #42	; 0x2a
 8003a42:	d015      	beq.n	8003a70 <_vfiprintf_r+0x120>
 8003a44:	9a07      	ldr	r2, [sp, #28]
 8003a46:	4654      	mov	r4, sl
 8003a48:	2000      	movs	r0, #0
 8003a4a:	f04f 0c0a 	mov.w	ip, #10
 8003a4e:	4621      	mov	r1, r4
 8003a50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a54:	3b30      	subs	r3, #48	; 0x30
 8003a56:	2b09      	cmp	r3, #9
 8003a58:	d94d      	bls.n	8003af6 <_vfiprintf_r+0x1a6>
 8003a5a:	b1b0      	cbz	r0, 8003a8a <_vfiprintf_r+0x13a>
 8003a5c:	9207      	str	r2, [sp, #28]
 8003a5e:	e014      	b.n	8003a8a <_vfiprintf_r+0x13a>
 8003a60:	eba0 0308 	sub.w	r3, r0, r8
 8003a64:	fa09 f303 	lsl.w	r3, r9, r3
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	9304      	str	r3, [sp, #16]
 8003a6c:	46a2      	mov	sl, r4
 8003a6e:	e7d2      	b.n	8003a16 <_vfiprintf_r+0xc6>
 8003a70:	9b03      	ldr	r3, [sp, #12]
 8003a72:	1d19      	adds	r1, r3, #4
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	9103      	str	r1, [sp, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bfbb      	ittet	lt
 8003a7c:	425b      	neglt	r3, r3
 8003a7e:	f042 0202 	orrlt.w	r2, r2, #2
 8003a82:	9307      	strge	r3, [sp, #28]
 8003a84:	9307      	strlt	r3, [sp, #28]
 8003a86:	bfb8      	it	lt
 8003a88:	9204      	strlt	r2, [sp, #16]
 8003a8a:	7823      	ldrb	r3, [r4, #0]
 8003a8c:	2b2e      	cmp	r3, #46	; 0x2e
 8003a8e:	d10c      	bne.n	8003aaa <_vfiprintf_r+0x15a>
 8003a90:	7863      	ldrb	r3, [r4, #1]
 8003a92:	2b2a      	cmp	r3, #42	; 0x2a
 8003a94:	d134      	bne.n	8003b00 <_vfiprintf_r+0x1b0>
 8003a96:	9b03      	ldr	r3, [sp, #12]
 8003a98:	1d1a      	adds	r2, r3, #4
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	9203      	str	r2, [sp, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	bfb8      	it	lt
 8003aa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003aa6:	3402      	adds	r4, #2
 8003aa8:	9305      	str	r3, [sp, #20]
 8003aaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003b80 <_vfiprintf_r+0x230>
 8003aae:	7821      	ldrb	r1, [r4, #0]
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	4650      	mov	r0, sl
 8003ab4:	f7fc fb8c 	bl	80001d0 <memchr>
 8003ab8:	b138      	cbz	r0, 8003aca <_vfiprintf_r+0x17a>
 8003aba:	9b04      	ldr	r3, [sp, #16]
 8003abc:	eba0 000a 	sub.w	r0, r0, sl
 8003ac0:	2240      	movs	r2, #64	; 0x40
 8003ac2:	4082      	lsls	r2, r0
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	3401      	adds	r4, #1
 8003ac8:	9304      	str	r3, [sp, #16]
 8003aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ace:	4829      	ldr	r0, [pc, #164]	; (8003b74 <_vfiprintf_r+0x224>)
 8003ad0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ad4:	2206      	movs	r2, #6
 8003ad6:	f7fc fb7b 	bl	80001d0 <memchr>
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d03f      	beq.n	8003b5e <_vfiprintf_r+0x20e>
 8003ade:	4b26      	ldr	r3, [pc, #152]	; (8003b78 <_vfiprintf_r+0x228>)
 8003ae0:	bb1b      	cbnz	r3, 8003b2a <_vfiprintf_r+0x1da>
 8003ae2:	9b03      	ldr	r3, [sp, #12]
 8003ae4:	3307      	adds	r3, #7
 8003ae6:	f023 0307 	bic.w	r3, r3, #7
 8003aea:	3308      	adds	r3, #8
 8003aec:	9303      	str	r3, [sp, #12]
 8003aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003af0:	443b      	add	r3, r7
 8003af2:	9309      	str	r3, [sp, #36]	; 0x24
 8003af4:	e768      	b.n	80039c8 <_vfiprintf_r+0x78>
 8003af6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003afa:	460c      	mov	r4, r1
 8003afc:	2001      	movs	r0, #1
 8003afe:	e7a6      	b.n	8003a4e <_vfiprintf_r+0xfe>
 8003b00:	2300      	movs	r3, #0
 8003b02:	3401      	adds	r4, #1
 8003b04:	9305      	str	r3, [sp, #20]
 8003b06:	4619      	mov	r1, r3
 8003b08:	f04f 0c0a 	mov.w	ip, #10
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b12:	3a30      	subs	r2, #48	; 0x30
 8003b14:	2a09      	cmp	r2, #9
 8003b16:	d903      	bls.n	8003b20 <_vfiprintf_r+0x1d0>
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0c6      	beq.n	8003aaa <_vfiprintf_r+0x15a>
 8003b1c:	9105      	str	r1, [sp, #20]
 8003b1e:	e7c4      	b.n	8003aaa <_vfiprintf_r+0x15a>
 8003b20:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b24:	4604      	mov	r4, r0
 8003b26:	2301      	movs	r3, #1
 8003b28:	e7f0      	b.n	8003b0c <_vfiprintf_r+0x1bc>
 8003b2a:	ab03      	add	r3, sp, #12
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	462a      	mov	r2, r5
 8003b30:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <_vfiprintf_r+0x22c>)
 8003b32:	a904      	add	r1, sp, #16
 8003b34:	4630      	mov	r0, r6
 8003b36:	f3af 8000 	nop.w
 8003b3a:	4607      	mov	r7, r0
 8003b3c:	1c78      	adds	r0, r7, #1
 8003b3e:	d1d6      	bne.n	8003aee <_vfiprintf_r+0x19e>
 8003b40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b42:	07d9      	lsls	r1, r3, #31
 8003b44:	d405      	bmi.n	8003b52 <_vfiprintf_r+0x202>
 8003b46:	89ab      	ldrh	r3, [r5, #12]
 8003b48:	059a      	lsls	r2, r3, #22
 8003b4a:	d402      	bmi.n	8003b52 <_vfiprintf_r+0x202>
 8003b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b4e:	f7ff fddb 	bl	8003708 <__retarget_lock_release_recursive>
 8003b52:	89ab      	ldrh	r3, [r5, #12]
 8003b54:	065b      	lsls	r3, r3, #25
 8003b56:	f53f af1d 	bmi.w	8003994 <_vfiprintf_r+0x44>
 8003b5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b5c:	e71c      	b.n	8003998 <_vfiprintf_r+0x48>
 8003b5e:	ab03      	add	r3, sp, #12
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	462a      	mov	r2, r5
 8003b64:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <_vfiprintf_r+0x22c>)
 8003b66:	a904      	add	r1, sp, #16
 8003b68:	4630      	mov	r0, r6
 8003b6a:	f000 f879 	bl	8003c60 <_printf_i>
 8003b6e:	e7e4      	b.n	8003b3a <_vfiprintf_r+0x1ea>
 8003b70:	080041e0 	.word	0x080041e0
 8003b74:	080041ea 	.word	0x080041ea
 8003b78:	00000000 	.word	0x00000000
 8003b7c:	0800392b 	.word	0x0800392b
 8003b80:	080041e6 	.word	0x080041e6

08003b84 <_printf_common>:
 8003b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b88:	4616      	mov	r6, r2
 8003b8a:	4699      	mov	r9, r3
 8003b8c:	688a      	ldr	r2, [r1, #8]
 8003b8e:	690b      	ldr	r3, [r1, #16]
 8003b90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b94:	4293      	cmp	r3, r2
 8003b96:	bfb8      	it	lt
 8003b98:	4613      	movlt	r3, r2
 8003b9a:	6033      	str	r3, [r6, #0]
 8003b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ba0:	4607      	mov	r7, r0
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	b10a      	cbz	r2, 8003baa <_printf_common+0x26>
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	6033      	str	r3, [r6, #0]
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	0699      	lsls	r1, r3, #26
 8003bae:	bf42      	ittt	mi
 8003bb0:	6833      	ldrmi	r3, [r6, #0]
 8003bb2:	3302      	addmi	r3, #2
 8003bb4:	6033      	strmi	r3, [r6, #0]
 8003bb6:	6825      	ldr	r5, [r4, #0]
 8003bb8:	f015 0506 	ands.w	r5, r5, #6
 8003bbc:	d106      	bne.n	8003bcc <_printf_common+0x48>
 8003bbe:	f104 0a19 	add.w	sl, r4, #25
 8003bc2:	68e3      	ldr	r3, [r4, #12]
 8003bc4:	6832      	ldr	r2, [r6, #0]
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	42ab      	cmp	r3, r5
 8003bca:	dc26      	bgt.n	8003c1a <_printf_common+0x96>
 8003bcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bd0:	1e13      	subs	r3, r2, #0
 8003bd2:	6822      	ldr	r2, [r4, #0]
 8003bd4:	bf18      	it	ne
 8003bd6:	2301      	movne	r3, #1
 8003bd8:	0692      	lsls	r2, r2, #26
 8003bda:	d42b      	bmi.n	8003c34 <_printf_common+0xb0>
 8003bdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003be0:	4649      	mov	r1, r9
 8003be2:	4638      	mov	r0, r7
 8003be4:	47c0      	blx	r8
 8003be6:	3001      	adds	r0, #1
 8003be8:	d01e      	beq.n	8003c28 <_printf_common+0xa4>
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	6922      	ldr	r2, [r4, #16]
 8003bee:	f003 0306 	and.w	r3, r3, #6
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	bf02      	ittt	eq
 8003bf6:	68e5      	ldreq	r5, [r4, #12]
 8003bf8:	6833      	ldreq	r3, [r6, #0]
 8003bfa:	1aed      	subeq	r5, r5, r3
 8003bfc:	68a3      	ldr	r3, [r4, #8]
 8003bfe:	bf0c      	ite	eq
 8003c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c04:	2500      	movne	r5, #0
 8003c06:	4293      	cmp	r3, r2
 8003c08:	bfc4      	itt	gt
 8003c0a:	1a9b      	subgt	r3, r3, r2
 8003c0c:	18ed      	addgt	r5, r5, r3
 8003c0e:	2600      	movs	r6, #0
 8003c10:	341a      	adds	r4, #26
 8003c12:	42b5      	cmp	r5, r6
 8003c14:	d11a      	bne.n	8003c4c <_printf_common+0xc8>
 8003c16:	2000      	movs	r0, #0
 8003c18:	e008      	b.n	8003c2c <_printf_common+0xa8>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	4652      	mov	r2, sl
 8003c1e:	4649      	mov	r1, r9
 8003c20:	4638      	mov	r0, r7
 8003c22:	47c0      	blx	r8
 8003c24:	3001      	adds	r0, #1
 8003c26:	d103      	bne.n	8003c30 <_printf_common+0xac>
 8003c28:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c30:	3501      	adds	r5, #1
 8003c32:	e7c6      	b.n	8003bc2 <_printf_common+0x3e>
 8003c34:	18e1      	adds	r1, r4, r3
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	2030      	movs	r0, #48	; 0x30
 8003c3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c3e:	4422      	add	r2, r4
 8003c40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c48:	3302      	adds	r3, #2
 8003c4a:	e7c7      	b.n	8003bdc <_printf_common+0x58>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	4622      	mov	r2, r4
 8003c50:	4649      	mov	r1, r9
 8003c52:	4638      	mov	r0, r7
 8003c54:	47c0      	blx	r8
 8003c56:	3001      	adds	r0, #1
 8003c58:	d0e6      	beq.n	8003c28 <_printf_common+0xa4>
 8003c5a:	3601      	adds	r6, #1
 8003c5c:	e7d9      	b.n	8003c12 <_printf_common+0x8e>
	...

08003c60 <_printf_i>:
 8003c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c64:	7e0f      	ldrb	r7, [r1, #24]
 8003c66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c68:	2f78      	cmp	r7, #120	; 0x78
 8003c6a:	4691      	mov	r9, r2
 8003c6c:	4680      	mov	r8, r0
 8003c6e:	460c      	mov	r4, r1
 8003c70:	469a      	mov	sl, r3
 8003c72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c76:	d807      	bhi.n	8003c88 <_printf_i+0x28>
 8003c78:	2f62      	cmp	r7, #98	; 0x62
 8003c7a:	d80a      	bhi.n	8003c92 <_printf_i+0x32>
 8003c7c:	2f00      	cmp	r7, #0
 8003c7e:	f000 80d4 	beq.w	8003e2a <_printf_i+0x1ca>
 8003c82:	2f58      	cmp	r7, #88	; 0x58
 8003c84:	f000 80c0 	beq.w	8003e08 <_printf_i+0x1a8>
 8003c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c90:	e03a      	b.n	8003d08 <_printf_i+0xa8>
 8003c92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c96:	2b15      	cmp	r3, #21
 8003c98:	d8f6      	bhi.n	8003c88 <_printf_i+0x28>
 8003c9a:	a101      	add	r1, pc, #4	; (adr r1, 8003ca0 <_printf_i+0x40>)
 8003c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ca0:	08003cf9 	.word	0x08003cf9
 8003ca4:	08003d0d 	.word	0x08003d0d
 8003ca8:	08003c89 	.word	0x08003c89
 8003cac:	08003c89 	.word	0x08003c89
 8003cb0:	08003c89 	.word	0x08003c89
 8003cb4:	08003c89 	.word	0x08003c89
 8003cb8:	08003d0d 	.word	0x08003d0d
 8003cbc:	08003c89 	.word	0x08003c89
 8003cc0:	08003c89 	.word	0x08003c89
 8003cc4:	08003c89 	.word	0x08003c89
 8003cc8:	08003c89 	.word	0x08003c89
 8003ccc:	08003e11 	.word	0x08003e11
 8003cd0:	08003d39 	.word	0x08003d39
 8003cd4:	08003dcb 	.word	0x08003dcb
 8003cd8:	08003c89 	.word	0x08003c89
 8003cdc:	08003c89 	.word	0x08003c89
 8003ce0:	08003e33 	.word	0x08003e33
 8003ce4:	08003c89 	.word	0x08003c89
 8003ce8:	08003d39 	.word	0x08003d39
 8003cec:	08003c89 	.word	0x08003c89
 8003cf0:	08003c89 	.word	0x08003c89
 8003cf4:	08003dd3 	.word	0x08003dd3
 8003cf8:	682b      	ldr	r3, [r5, #0]
 8003cfa:	1d1a      	adds	r2, r3, #4
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	602a      	str	r2, [r5, #0]
 8003d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e09f      	b.n	8003e4c <_printf_i+0x1ec>
 8003d0c:	6820      	ldr	r0, [r4, #0]
 8003d0e:	682b      	ldr	r3, [r5, #0]
 8003d10:	0607      	lsls	r7, r0, #24
 8003d12:	f103 0104 	add.w	r1, r3, #4
 8003d16:	6029      	str	r1, [r5, #0]
 8003d18:	d501      	bpl.n	8003d1e <_printf_i+0xbe>
 8003d1a:	681e      	ldr	r6, [r3, #0]
 8003d1c:	e003      	b.n	8003d26 <_printf_i+0xc6>
 8003d1e:	0646      	lsls	r6, r0, #25
 8003d20:	d5fb      	bpl.n	8003d1a <_printf_i+0xba>
 8003d22:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003d26:	2e00      	cmp	r6, #0
 8003d28:	da03      	bge.n	8003d32 <_printf_i+0xd2>
 8003d2a:	232d      	movs	r3, #45	; 0x2d
 8003d2c:	4276      	negs	r6, r6
 8003d2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d32:	485a      	ldr	r0, [pc, #360]	; (8003e9c <_printf_i+0x23c>)
 8003d34:	230a      	movs	r3, #10
 8003d36:	e012      	b.n	8003d5e <_printf_i+0xfe>
 8003d38:	682b      	ldr	r3, [r5, #0]
 8003d3a:	6820      	ldr	r0, [r4, #0]
 8003d3c:	1d19      	adds	r1, r3, #4
 8003d3e:	6029      	str	r1, [r5, #0]
 8003d40:	0605      	lsls	r5, r0, #24
 8003d42:	d501      	bpl.n	8003d48 <_printf_i+0xe8>
 8003d44:	681e      	ldr	r6, [r3, #0]
 8003d46:	e002      	b.n	8003d4e <_printf_i+0xee>
 8003d48:	0641      	lsls	r1, r0, #25
 8003d4a:	d5fb      	bpl.n	8003d44 <_printf_i+0xe4>
 8003d4c:	881e      	ldrh	r6, [r3, #0]
 8003d4e:	4853      	ldr	r0, [pc, #332]	; (8003e9c <_printf_i+0x23c>)
 8003d50:	2f6f      	cmp	r7, #111	; 0x6f
 8003d52:	bf0c      	ite	eq
 8003d54:	2308      	moveq	r3, #8
 8003d56:	230a      	movne	r3, #10
 8003d58:	2100      	movs	r1, #0
 8003d5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d5e:	6865      	ldr	r5, [r4, #4]
 8003d60:	60a5      	str	r5, [r4, #8]
 8003d62:	2d00      	cmp	r5, #0
 8003d64:	bfa2      	ittt	ge
 8003d66:	6821      	ldrge	r1, [r4, #0]
 8003d68:	f021 0104 	bicge.w	r1, r1, #4
 8003d6c:	6021      	strge	r1, [r4, #0]
 8003d6e:	b90e      	cbnz	r6, 8003d74 <_printf_i+0x114>
 8003d70:	2d00      	cmp	r5, #0
 8003d72:	d04b      	beq.n	8003e0c <_printf_i+0x1ac>
 8003d74:	4615      	mov	r5, r2
 8003d76:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d7a:	fb03 6711 	mls	r7, r3, r1, r6
 8003d7e:	5dc7      	ldrb	r7, [r0, r7]
 8003d80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d84:	4637      	mov	r7, r6
 8003d86:	42bb      	cmp	r3, r7
 8003d88:	460e      	mov	r6, r1
 8003d8a:	d9f4      	bls.n	8003d76 <_printf_i+0x116>
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d10b      	bne.n	8003da8 <_printf_i+0x148>
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	07de      	lsls	r6, r3, #31
 8003d94:	d508      	bpl.n	8003da8 <_printf_i+0x148>
 8003d96:	6923      	ldr	r3, [r4, #16]
 8003d98:	6861      	ldr	r1, [r4, #4]
 8003d9a:	4299      	cmp	r1, r3
 8003d9c:	bfde      	ittt	le
 8003d9e:	2330      	movle	r3, #48	; 0x30
 8003da0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003da4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003da8:	1b52      	subs	r2, r2, r5
 8003daa:	6122      	str	r2, [r4, #16]
 8003dac:	f8cd a000 	str.w	sl, [sp]
 8003db0:	464b      	mov	r3, r9
 8003db2:	aa03      	add	r2, sp, #12
 8003db4:	4621      	mov	r1, r4
 8003db6:	4640      	mov	r0, r8
 8003db8:	f7ff fee4 	bl	8003b84 <_printf_common>
 8003dbc:	3001      	adds	r0, #1
 8003dbe:	d14a      	bne.n	8003e56 <_printf_i+0x1f6>
 8003dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc4:	b004      	add	sp, #16
 8003dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	f043 0320 	orr.w	r3, r3, #32
 8003dd0:	6023      	str	r3, [r4, #0]
 8003dd2:	4833      	ldr	r0, [pc, #204]	; (8003ea0 <_printf_i+0x240>)
 8003dd4:	2778      	movs	r7, #120	; 0x78
 8003dd6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	6829      	ldr	r1, [r5, #0]
 8003dde:	061f      	lsls	r7, r3, #24
 8003de0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003de4:	d402      	bmi.n	8003dec <_printf_i+0x18c>
 8003de6:	065f      	lsls	r7, r3, #25
 8003de8:	bf48      	it	mi
 8003dea:	b2b6      	uxthmi	r6, r6
 8003dec:	07df      	lsls	r7, r3, #31
 8003dee:	bf48      	it	mi
 8003df0:	f043 0320 	orrmi.w	r3, r3, #32
 8003df4:	6029      	str	r1, [r5, #0]
 8003df6:	bf48      	it	mi
 8003df8:	6023      	strmi	r3, [r4, #0]
 8003dfa:	b91e      	cbnz	r6, 8003e04 <_printf_i+0x1a4>
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	f023 0320 	bic.w	r3, r3, #32
 8003e02:	6023      	str	r3, [r4, #0]
 8003e04:	2310      	movs	r3, #16
 8003e06:	e7a7      	b.n	8003d58 <_printf_i+0xf8>
 8003e08:	4824      	ldr	r0, [pc, #144]	; (8003e9c <_printf_i+0x23c>)
 8003e0a:	e7e4      	b.n	8003dd6 <_printf_i+0x176>
 8003e0c:	4615      	mov	r5, r2
 8003e0e:	e7bd      	b.n	8003d8c <_printf_i+0x12c>
 8003e10:	682b      	ldr	r3, [r5, #0]
 8003e12:	6826      	ldr	r6, [r4, #0]
 8003e14:	6961      	ldr	r1, [r4, #20]
 8003e16:	1d18      	adds	r0, r3, #4
 8003e18:	6028      	str	r0, [r5, #0]
 8003e1a:	0635      	lsls	r5, r6, #24
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	d501      	bpl.n	8003e24 <_printf_i+0x1c4>
 8003e20:	6019      	str	r1, [r3, #0]
 8003e22:	e002      	b.n	8003e2a <_printf_i+0x1ca>
 8003e24:	0670      	lsls	r0, r6, #25
 8003e26:	d5fb      	bpl.n	8003e20 <_printf_i+0x1c0>
 8003e28:	8019      	strh	r1, [r3, #0]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	6123      	str	r3, [r4, #16]
 8003e2e:	4615      	mov	r5, r2
 8003e30:	e7bc      	b.n	8003dac <_printf_i+0x14c>
 8003e32:	682b      	ldr	r3, [r5, #0]
 8003e34:	1d1a      	adds	r2, r3, #4
 8003e36:	602a      	str	r2, [r5, #0]
 8003e38:	681d      	ldr	r5, [r3, #0]
 8003e3a:	6862      	ldr	r2, [r4, #4]
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	4628      	mov	r0, r5
 8003e40:	f7fc f9c6 	bl	80001d0 <memchr>
 8003e44:	b108      	cbz	r0, 8003e4a <_printf_i+0x1ea>
 8003e46:	1b40      	subs	r0, r0, r5
 8003e48:	6060      	str	r0, [r4, #4]
 8003e4a:	6863      	ldr	r3, [r4, #4]
 8003e4c:	6123      	str	r3, [r4, #16]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e54:	e7aa      	b.n	8003dac <_printf_i+0x14c>
 8003e56:	6923      	ldr	r3, [r4, #16]
 8003e58:	462a      	mov	r2, r5
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	4640      	mov	r0, r8
 8003e5e:	47d0      	blx	sl
 8003e60:	3001      	adds	r0, #1
 8003e62:	d0ad      	beq.n	8003dc0 <_printf_i+0x160>
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	079b      	lsls	r3, r3, #30
 8003e68:	d413      	bmi.n	8003e92 <_printf_i+0x232>
 8003e6a:	68e0      	ldr	r0, [r4, #12]
 8003e6c:	9b03      	ldr	r3, [sp, #12]
 8003e6e:	4298      	cmp	r0, r3
 8003e70:	bfb8      	it	lt
 8003e72:	4618      	movlt	r0, r3
 8003e74:	e7a6      	b.n	8003dc4 <_printf_i+0x164>
 8003e76:	2301      	movs	r3, #1
 8003e78:	4632      	mov	r2, r6
 8003e7a:	4649      	mov	r1, r9
 8003e7c:	4640      	mov	r0, r8
 8003e7e:	47d0      	blx	sl
 8003e80:	3001      	adds	r0, #1
 8003e82:	d09d      	beq.n	8003dc0 <_printf_i+0x160>
 8003e84:	3501      	adds	r5, #1
 8003e86:	68e3      	ldr	r3, [r4, #12]
 8003e88:	9903      	ldr	r1, [sp, #12]
 8003e8a:	1a5b      	subs	r3, r3, r1
 8003e8c:	42ab      	cmp	r3, r5
 8003e8e:	dcf2      	bgt.n	8003e76 <_printf_i+0x216>
 8003e90:	e7eb      	b.n	8003e6a <_printf_i+0x20a>
 8003e92:	2500      	movs	r5, #0
 8003e94:	f104 0619 	add.w	r6, r4, #25
 8003e98:	e7f5      	b.n	8003e86 <_printf_i+0x226>
 8003e9a:	bf00      	nop
 8003e9c:	080041f1 	.word	0x080041f1
 8003ea0:	08004202 	.word	0x08004202

08003ea4 <__sflush_r>:
 8003ea4:	898a      	ldrh	r2, [r1, #12]
 8003ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eaa:	4605      	mov	r5, r0
 8003eac:	0710      	lsls	r0, r2, #28
 8003eae:	460c      	mov	r4, r1
 8003eb0:	d458      	bmi.n	8003f64 <__sflush_r+0xc0>
 8003eb2:	684b      	ldr	r3, [r1, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	dc05      	bgt.n	8003ec4 <__sflush_r+0x20>
 8003eb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	dc02      	bgt.n	8003ec4 <__sflush_r+0x20>
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ec6:	2e00      	cmp	r6, #0
 8003ec8:	d0f9      	beq.n	8003ebe <__sflush_r+0x1a>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ed0:	682f      	ldr	r7, [r5, #0]
 8003ed2:	6a21      	ldr	r1, [r4, #32]
 8003ed4:	602b      	str	r3, [r5, #0]
 8003ed6:	d032      	beq.n	8003f3e <__sflush_r+0x9a>
 8003ed8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003eda:	89a3      	ldrh	r3, [r4, #12]
 8003edc:	075a      	lsls	r2, r3, #29
 8003ede:	d505      	bpl.n	8003eec <__sflush_r+0x48>
 8003ee0:	6863      	ldr	r3, [r4, #4]
 8003ee2:	1ac0      	subs	r0, r0, r3
 8003ee4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ee6:	b10b      	cbz	r3, 8003eec <__sflush_r+0x48>
 8003ee8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003eea:	1ac0      	subs	r0, r0, r3
 8003eec:	2300      	movs	r3, #0
 8003eee:	4602      	mov	r2, r0
 8003ef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ef2:	6a21      	ldr	r1, [r4, #32]
 8003ef4:	4628      	mov	r0, r5
 8003ef6:	47b0      	blx	r6
 8003ef8:	1c43      	adds	r3, r0, #1
 8003efa:	89a3      	ldrh	r3, [r4, #12]
 8003efc:	d106      	bne.n	8003f0c <__sflush_r+0x68>
 8003efe:	6829      	ldr	r1, [r5, #0]
 8003f00:	291d      	cmp	r1, #29
 8003f02:	d82b      	bhi.n	8003f5c <__sflush_r+0xb8>
 8003f04:	4a29      	ldr	r2, [pc, #164]	; (8003fac <__sflush_r+0x108>)
 8003f06:	410a      	asrs	r2, r1
 8003f08:	07d6      	lsls	r6, r2, #31
 8003f0a:	d427      	bmi.n	8003f5c <__sflush_r+0xb8>
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	6062      	str	r2, [r4, #4]
 8003f10:	04d9      	lsls	r1, r3, #19
 8003f12:	6922      	ldr	r2, [r4, #16]
 8003f14:	6022      	str	r2, [r4, #0]
 8003f16:	d504      	bpl.n	8003f22 <__sflush_r+0x7e>
 8003f18:	1c42      	adds	r2, r0, #1
 8003f1a:	d101      	bne.n	8003f20 <__sflush_r+0x7c>
 8003f1c:	682b      	ldr	r3, [r5, #0]
 8003f1e:	b903      	cbnz	r3, 8003f22 <__sflush_r+0x7e>
 8003f20:	6560      	str	r0, [r4, #84]	; 0x54
 8003f22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f24:	602f      	str	r7, [r5, #0]
 8003f26:	2900      	cmp	r1, #0
 8003f28:	d0c9      	beq.n	8003ebe <__sflush_r+0x1a>
 8003f2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f2e:	4299      	cmp	r1, r3
 8003f30:	d002      	beq.n	8003f38 <__sflush_r+0x94>
 8003f32:	4628      	mov	r0, r5
 8003f34:	f7ff fbea 	bl	800370c <_free_r>
 8003f38:	2000      	movs	r0, #0
 8003f3a:	6360      	str	r0, [r4, #52]	; 0x34
 8003f3c:	e7c0      	b.n	8003ec0 <__sflush_r+0x1c>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	4628      	mov	r0, r5
 8003f42:	47b0      	blx	r6
 8003f44:	1c41      	adds	r1, r0, #1
 8003f46:	d1c8      	bne.n	8003eda <__sflush_r+0x36>
 8003f48:	682b      	ldr	r3, [r5, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0c5      	beq.n	8003eda <__sflush_r+0x36>
 8003f4e:	2b1d      	cmp	r3, #29
 8003f50:	d001      	beq.n	8003f56 <__sflush_r+0xb2>
 8003f52:	2b16      	cmp	r3, #22
 8003f54:	d101      	bne.n	8003f5a <__sflush_r+0xb6>
 8003f56:	602f      	str	r7, [r5, #0]
 8003f58:	e7b1      	b.n	8003ebe <__sflush_r+0x1a>
 8003f5a:	89a3      	ldrh	r3, [r4, #12]
 8003f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f60:	81a3      	strh	r3, [r4, #12]
 8003f62:	e7ad      	b.n	8003ec0 <__sflush_r+0x1c>
 8003f64:	690f      	ldr	r7, [r1, #16]
 8003f66:	2f00      	cmp	r7, #0
 8003f68:	d0a9      	beq.n	8003ebe <__sflush_r+0x1a>
 8003f6a:	0793      	lsls	r3, r2, #30
 8003f6c:	680e      	ldr	r6, [r1, #0]
 8003f6e:	bf08      	it	eq
 8003f70:	694b      	ldreq	r3, [r1, #20]
 8003f72:	600f      	str	r7, [r1, #0]
 8003f74:	bf18      	it	ne
 8003f76:	2300      	movne	r3, #0
 8003f78:	eba6 0807 	sub.w	r8, r6, r7
 8003f7c:	608b      	str	r3, [r1, #8]
 8003f7e:	f1b8 0f00 	cmp.w	r8, #0
 8003f82:	dd9c      	ble.n	8003ebe <__sflush_r+0x1a>
 8003f84:	6a21      	ldr	r1, [r4, #32]
 8003f86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f88:	4643      	mov	r3, r8
 8003f8a:	463a      	mov	r2, r7
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	47b0      	blx	r6
 8003f90:	2800      	cmp	r0, #0
 8003f92:	dc06      	bgt.n	8003fa2 <__sflush_r+0xfe>
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f9a:	81a3      	strh	r3, [r4, #12]
 8003f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa0:	e78e      	b.n	8003ec0 <__sflush_r+0x1c>
 8003fa2:	4407      	add	r7, r0
 8003fa4:	eba8 0800 	sub.w	r8, r8, r0
 8003fa8:	e7e9      	b.n	8003f7e <__sflush_r+0xda>
 8003faa:	bf00      	nop
 8003fac:	dfbffffe 	.word	0xdfbffffe

08003fb0 <_fflush_r>:
 8003fb0:	b538      	push	{r3, r4, r5, lr}
 8003fb2:	690b      	ldr	r3, [r1, #16]
 8003fb4:	4605      	mov	r5, r0
 8003fb6:	460c      	mov	r4, r1
 8003fb8:	b913      	cbnz	r3, 8003fc0 <_fflush_r+0x10>
 8003fba:	2500      	movs	r5, #0
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	bd38      	pop	{r3, r4, r5, pc}
 8003fc0:	b118      	cbz	r0, 8003fca <_fflush_r+0x1a>
 8003fc2:	6a03      	ldr	r3, [r0, #32]
 8003fc4:	b90b      	cbnz	r3, 8003fca <_fflush_r+0x1a>
 8003fc6:	f7ff f9a9 	bl	800331c <__sinit>
 8003fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f3      	beq.n	8003fba <_fflush_r+0xa>
 8003fd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003fd4:	07d0      	lsls	r0, r2, #31
 8003fd6:	d404      	bmi.n	8003fe2 <_fflush_r+0x32>
 8003fd8:	0599      	lsls	r1, r3, #22
 8003fda:	d402      	bmi.n	8003fe2 <_fflush_r+0x32>
 8003fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fde:	f7ff fb92 	bl	8003706 <__retarget_lock_acquire_recursive>
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	f7ff ff5d 	bl	8003ea4 <__sflush_r>
 8003fea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fec:	07da      	lsls	r2, r3, #31
 8003fee:	4605      	mov	r5, r0
 8003ff0:	d4e4      	bmi.n	8003fbc <_fflush_r+0xc>
 8003ff2:	89a3      	ldrh	r3, [r4, #12]
 8003ff4:	059b      	lsls	r3, r3, #22
 8003ff6:	d4e1      	bmi.n	8003fbc <_fflush_r+0xc>
 8003ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ffa:	f7ff fb85 	bl	8003708 <__retarget_lock_release_recursive>
 8003ffe:	e7dd      	b.n	8003fbc <_fflush_r+0xc>

08004000 <__swhatbuf_r>:
 8004000:	b570      	push	{r4, r5, r6, lr}
 8004002:	460c      	mov	r4, r1
 8004004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004008:	2900      	cmp	r1, #0
 800400a:	b096      	sub	sp, #88	; 0x58
 800400c:	4615      	mov	r5, r2
 800400e:	461e      	mov	r6, r3
 8004010:	da0d      	bge.n	800402e <__swhatbuf_r+0x2e>
 8004012:	89a3      	ldrh	r3, [r4, #12]
 8004014:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004018:	f04f 0100 	mov.w	r1, #0
 800401c:	bf0c      	ite	eq
 800401e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004022:	2340      	movne	r3, #64	; 0x40
 8004024:	2000      	movs	r0, #0
 8004026:	6031      	str	r1, [r6, #0]
 8004028:	602b      	str	r3, [r5, #0]
 800402a:	b016      	add	sp, #88	; 0x58
 800402c:	bd70      	pop	{r4, r5, r6, pc}
 800402e:	466a      	mov	r2, sp
 8004030:	f000 f848 	bl	80040c4 <_fstat_r>
 8004034:	2800      	cmp	r0, #0
 8004036:	dbec      	blt.n	8004012 <__swhatbuf_r+0x12>
 8004038:	9901      	ldr	r1, [sp, #4]
 800403a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800403e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004042:	4259      	negs	r1, r3
 8004044:	4159      	adcs	r1, r3
 8004046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800404a:	e7eb      	b.n	8004024 <__swhatbuf_r+0x24>

0800404c <__smakebuf_r>:
 800404c:	898b      	ldrh	r3, [r1, #12]
 800404e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004050:	079d      	lsls	r5, r3, #30
 8004052:	4606      	mov	r6, r0
 8004054:	460c      	mov	r4, r1
 8004056:	d507      	bpl.n	8004068 <__smakebuf_r+0x1c>
 8004058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800405c:	6023      	str	r3, [r4, #0]
 800405e:	6123      	str	r3, [r4, #16]
 8004060:	2301      	movs	r3, #1
 8004062:	6163      	str	r3, [r4, #20]
 8004064:	b002      	add	sp, #8
 8004066:	bd70      	pop	{r4, r5, r6, pc}
 8004068:	ab01      	add	r3, sp, #4
 800406a:	466a      	mov	r2, sp
 800406c:	f7ff ffc8 	bl	8004000 <__swhatbuf_r>
 8004070:	9900      	ldr	r1, [sp, #0]
 8004072:	4605      	mov	r5, r0
 8004074:	4630      	mov	r0, r6
 8004076:	f7ff fbb5 	bl	80037e4 <_malloc_r>
 800407a:	b948      	cbnz	r0, 8004090 <__smakebuf_r+0x44>
 800407c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004080:	059a      	lsls	r2, r3, #22
 8004082:	d4ef      	bmi.n	8004064 <__smakebuf_r+0x18>
 8004084:	f023 0303 	bic.w	r3, r3, #3
 8004088:	f043 0302 	orr.w	r3, r3, #2
 800408c:	81a3      	strh	r3, [r4, #12]
 800408e:	e7e3      	b.n	8004058 <__smakebuf_r+0xc>
 8004090:	89a3      	ldrh	r3, [r4, #12]
 8004092:	6020      	str	r0, [r4, #0]
 8004094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004098:	81a3      	strh	r3, [r4, #12]
 800409a:	9b00      	ldr	r3, [sp, #0]
 800409c:	6163      	str	r3, [r4, #20]
 800409e:	9b01      	ldr	r3, [sp, #4]
 80040a0:	6120      	str	r0, [r4, #16]
 80040a2:	b15b      	cbz	r3, 80040bc <__smakebuf_r+0x70>
 80040a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040a8:	4630      	mov	r0, r6
 80040aa:	f000 f81d 	bl	80040e8 <_isatty_r>
 80040ae:	b128      	cbz	r0, 80040bc <__smakebuf_r+0x70>
 80040b0:	89a3      	ldrh	r3, [r4, #12]
 80040b2:	f023 0303 	bic.w	r3, r3, #3
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	81a3      	strh	r3, [r4, #12]
 80040bc:	89a3      	ldrh	r3, [r4, #12]
 80040be:	431d      	orrs	r5, r3
 80040c0:	81a5      	strh	r5, [r4, #12]
 80040c2:	e7cf      	b.n	8004064 <__smakebuf_r+0x18>

080040c4 <_fstat_r>:
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	4d07      	ldr	r5, [pc, #28]	; (80040e4 <_fstat_r+0x20>)
 80040c8:	2300      	movs	r3, #0
 80040ca:	4604      	mov	r4, r0
 80040cc:	4608      	mov	r0, r1
 80040ce:	4611      	mov	r1, r2
 80040d0:	602b      	str	r3, [r5, #0]
 80040d2:	f7fc feca 	bl	8000e6a <_fstat>
 80040d6:	1c43      	adds	r3, r0, #1
 80040d8:	d102      	bne.n	80040e0 <_fstat_r+0x1c>
 80040da:	682b      	ldr	r3, [r5, #0]
 80040dc:	b103      	cbz	r3, 80040e0 <_fstat_r+0x1c>
 80040de:	6023      	str	r3, [r4, #0]
 80040e0:	bd38      	pop	{r3, r4, r5, pc}
 80040e2:	bf00      	nop
 80040e4:	20000258 	.word	0x20000258

080040e8 <_isatty_r>:
 80040e8:	b538      	push	{r3, r4, r5, lr}
 80040ea:	4d06      	ldr	r5, [pc, #24]	; (8004104 <_isatty_r+0x1c>)
 80040ec:	2300      	movs	r3, #0
 80040ee:	4604      	mov	r4, r0
 80040f0:	4608      	mov	r0, r1
 80040f2:	602b      	str	r3, [r5, #0]
 80040f4:	f7fc fec9 	bl	8000e8a <_isatty>
 80040f8:	1c43      	adds	r3, r0, #1
 80040fa:	d102      	bne.n	8004102 <_isatty_r+0x1a>
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	b103      	cbz	r3, 8004102 <_isatty_r+0x1a>
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	bd38      	pop	{r3, r4, r5, pc}
 8004104:	20000258 	.word	0x20000258

08004108 <_sbrk_r>:
 8004108:	b538      	push	{r3, r4, r5, lr}
 800410a:	4d06      	ldr	r5, [pc, #24]	; (8004124 <_sbrk_r+0x1c>)
 800410c:	2300      	movs	r3, #0
 800410e:	4604      	mov	r4, r0
 8004110:	4608      	mov	r0, r1
 8004112:	602b      	str	r3, [r5, #0]
 8004114:	f7fc fed2 	bl	8000ebc <_sbrk>
 8004118:	1c43      	adds	r3, r0, #1
 800411a:	d102      	bne.n	8004122 <_sbrk_r+0x1a>
 800411c:	682b      	ldr	r3, [r5, #0]
 800411e:	b103      	cbz	r3, 8004122 <_sbrk_r+0x1a>
 8004120:	6023      	str	r3, [r4, #0]
 8004122:	bd38      	pop	{r3, r4, r5, pc}
 8004124:	20000258 	.word	0x20000258

08004128 <_init>:
 8004128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412a:	bf00      	nop
 800412c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412e:	bc08      	pop	{r3}
 8004130:	469e      	mov	lr, r3
 8004132:	4770      	bx	lr

08004134 <_fini>:
 8004134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004136:	bf00      	nop
 8004138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413a:	bc08      	pop	{r3}
 800413c:	469e      	mov	lr, r3
 800413e:	4770      	bx	lr
